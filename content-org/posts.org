#+hugo_base_dir: ../
#+hugo_level_offset: 1
#+seq_todo: TODO DONE
#+startup: indent
#+hugo_weight: auto
#+hugo_auto_set_lastmod: t
#+hugo_paired_shortcodes: admonition
#+hugo_front_matter_key_replace: description>featuredImage
#+author:
#+hugo_custom_front_matter: :author "Matt Maguire"
#+filetags: @Blog

* Content
** Graphite Layout on Corne Keyboard
*** DONE Graphite Layout on Corne Keyboard :Computers:Keyboards:Corne:AltKeyboardLayouts:Gallium:Graphite:MechKeyboard:SplitKeyboard:Vial:
:PROPERTIES:
:CUSTOM_ID: graphite-layout-corne
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20250120_graphite-layout-corne
:EXPORT_DATE: 2025-01-20
:EXPORT_DESCRIPTION: 20250120_vial-graphite.png
:END:

I've been using the [[#graphite-keyboard-layout][Graphite keyboard layout]] on my [[#zsa-voyager-has-arrived][ZSA Voyager]] keyboard for a few weeks now, and I'm fairly happy with it. I therefore decided to update the keymap of my [[#corne-v4][Corne keyboard]] (which is for me is now a backup keyboard) from the [[#gallium-keyboard-layout][Gallium keyboard layout]] to the Graphite layout.

As I [[#update-gallium-keyboard-layout][mentioned previously]], the punctuation symbols in a standard Graphite layout require the use of key overrides. By default, the Voyager web configuration tool doesn't support key overrides, and so I implemented a solution using tap dance. For the Corne keyboard, I am using the Vial configuration tool which does support key overrides, and so I tried to set this up.

The key overrides on the Corne keyboard worked well, except for the comma on the right outer column of the home row. I couldn't set up a key override on that key because it is configured to be a =SHIFT= key when it is held down. It seems that Quantum keys like that are incompatible with defining key override.

I could have removed the shift function from that key, but then I decided to use a tap-dance setup like I did on my Voyager keyboard, so that the Corne would behave in a similar way. Because the Corne has only 3 rows instead of 4 (ie. there is no number row at the top), I had to reassign a couple of the keys to compensate. This is a layout I ended up with:

#+begin_example
`~ b  l  d  w  z   '_ y  o  u  j  ;:
\| n  r  t  s  g   p  h  a  e  i  ,
CW q  x  m  c  v   k  f  .> -" /< =+
         LA SP LC  RS RG RA
#+end_example

Some remarks:
- The =CW= key is the CAPS WORD, moved from the number row down to the bottom row. Similarly the ==/+= key was moved from the number row down to the bottom row.
- The keys with ='=, =.=, =-= and =/= were defined as tap-dance keys that, when held, output =_=, =>=, ="= and =<= respectively.
- The outer column keys on the bottom row were one-shot /Left-Alt/ and /Right-Alt/ keys, and those got moved to the outer thumb keys to make room for =CW= and ==+=
- The /space/ (=SP=), /Left-Ctrl/ (=LC=), /Right-Shift/ (=RS=) and /Right-Gui/ (=RG=) thumb keys are the same as on my voyager.

On my [[https://github.com/matt-maguire/kbd_firmware/tree/custom/keyboards/crkbd/vial-kb][GitHub]] you can find a link to the corresponding Vial Layout file [[https://github.com/matt-maguire/kbd_firmware/blob/custom/keyboards/crkbd/vial-kb/graphite_homerow_layer.vil][=graphite_homerow_layer.vil=]].

** Exporting Org Mode Tables to LaTeX
*** DONE Exporting Org Mode Tables to LaTeX :Emacs:OrgMode:LaTeX:Teaching:
:PROPERTIES:
:CUSTOM_ID: orgmode-tables
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20250117_orgmode-tables
:EXPORT_DATE: 2025-01-17
:END:

In my previous post on using [[#orgmode-lesson-notes][Org mode to make lesson notes]], I mentioned that it is possible to export Org mode tables to $\LaTeX$. There are some benefits to using Org mode instead of raw $\LaTeX$ when making tables:
- Org mode has a powerful [[https://orgmode.org/manual/Built_002din-Table-Editor.html][table editor]] that makes it easy to draw out a table and move rows and columns around. Org mode will automatically make the all the columns line up nicely.
- Since the cells in an Org mode table are all nicely lined up, it makes the table much easier to visualise without having to count =&= symbols in raw $\LaTeX$ code.
- Org mode allows the use of formulas in a table, somewhat like a spreadsheet -- this is harder to achieve using $\LaTeX$ directly.

The tables produced by Org mode are pretty basic by default. However, you can use the $\LaTeX$ [[https://ctan.org/pkg/tabularray][tabularray]] package to customise the look of your tables. Incidentally, if you are not already using the modern /tabularray/ to produce your $\LaTeX$ tables, you should definitely look into it -- it is way more powerful and easy to use compared to the more traditional table packages (you can thank me later).

So, let's produce a simple table for plotting the function $y=x^2$:

#+begin_src org
#+attr_latex: :environment tblr :align hlines,vlines,column{1}={gray9},column{2-Z}={r}
| $\bm x$ | $-2$ | $-1$ | 0 | 1 | 2 |
| $\bm y$ |    4 |    1 | 0 | 1 | 4 |
#+end_src

Some remarks:
- the =#+attr_latex:= line immediately preceeding the table tells Org mode to customise the $\LaTeX$ code for the table.
  - The =:environment= attribute tells Org mode to use tabularray's /tblr/ table environment instead of the $\LaTeX$ default table environment.
  - The =:align= attribute allows us to specify the parameters that the /tblr/ environment is expecting. You can see here I've asked for horizintal and vertical lines; I want the first column containing my variable names $x$ and $y$ to be shaded grey, and I want my numbers to be right-justified.
- I've used =$= signs around the variable names and the negative numbers so that they get rendered correctly. I also used the =\bm= from the $\LaTeX$ [[https://ctan.org/pkg/bm][bm package]] to have the variable names bold.

This will produce a table that looks like this:

[[file:20250117_table1.png]]

Sometimes you want to leave certain cells in the table blank, and leave enough space for students to write their own values into the table. This is easy using the /tblr/ environment:

#+begin_src org
#+attr_latex: :environment tblr
#+attr_latex: :align hlines,vlines,row{2}={15mm},column{1}={gray9},column{2-Z}={20mm,c}
| $\bm x$ | $-2$ | $-1$ | 0 | 1 | 2 |
| $\bm y$ |      |      |   |   |   |
#+end_src

- here I put the =:environment= and =:align= attributes on separate lines, just to show that this is an option.
- I've specified that the second row should be 15mm high
- I specified that columns $2$ through $Z$ should be $20$\,mm wide. The $Z$ has a special meaning when specifying rows and columns in a /tblr/ environment -- it refers to the last row or column. This means I don't need to adjust the range specification if I add and remove columns.

If we then export to PDF, the table will look like this:

[[file:20250117_table2.png]]

As I said before, /tblr/ is a convenient modern way to specify $\LaTeX$ tables, and it is a very powerful package. For more information about what it can do, check out the /tabularray/ [[https://mirror.aarnet.edu.au/pub/CTAN/macros/latex/contrib/tabularray/tabularray.pdf][documentation]].

** Using Org Mode for Lesson Notes
*** DONE Using Org Mode / LaTeX for Lesson Notes :Emacs:OrgMode:LaTeX:Teaching:
:PROPERTIES:
:CUSTOM_ID: orgmode-lesson-notes
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20250105_orgmode-lesson-notes
:EXPORT_DATE: 2025-01-06
:EXPORT_DESCRIPTION: 20250105_orgmode-banner.webp
:END:

Over the past year, I have been using $\LaTeX$ together with Emacs to produce lesson notes for some of my classes. One reason I went with Emacs instead of TeX Studio and the like was that Emacs provided a lot of shortcuts and completion features. I was finding though that $\LaTeX$ documents can sometimes become a bit verbose, which made me wonder about ways to make it easier to navigate the documents.

The other thing I was experimenting with last year was Emacs' Org Mode. This is a text "markdown" language that lets you structure your documents with headings that can be expanded and collapsed, so that you can quickly navigate documents, hide unneeded detail and focus on what's important in the here-and-now. The articles in this blog website are all written in Org Mode, and are then exported and pushed to the web. I was wondering whether Org Mode might allow me to more easily navigate the $\LaTeX$ lesson notes that I have been producing and generate PDF documents for printing.

**** The Case for Org Mode
A bit of research revealed that Org Mode text files can indeed be exported to $\LaTeX$ that can then be used to generate nice PDF documents. Org Mode is $\LaTeX$-aware, so that if you need to fall back on $\LaTeX$ features that go beyond what the simple Org Mode document format can handle, you can easily include necessary snippets of $\LaTeX$ code. The Babel feature of Org Mode also allows you to embed code and content produced by other programming languages such as Gnuplot, Python and Lisp. The simplicity of Org Mode's markdown language, its ability to manage complexity through its outlining mode and the flexibility in integrating other programming languages makes for a compelling case in producing maths-based content.

Another option I looked at was [[https://typst.app/][Typst]], a newer markdown-based solution for writing technical documnents. The basic markdown compiler is open-source and can be installed for free on your computer, but the full web-based service is a commercial offering. While the markdown language looks nice, the tool is not as mature as $\LaTeX$/TiKZ, and there would be something of a learning curve to get across [[https://github.com/johannes-wolf/cetz][CetZ]], which is Typst's answer to $\LaTeX$'s [[https://tikz.net/][TiKZ]] graphics package. Given that I am already using $\LaTeX$ and Org Mode in spearate spheres of my work, I decided that it makes sense to combine these two tools.

**** Setting Up Org Mode to Use $\LaTeX$'s /exesheet/ class

The $\LaTeX$ documents I have been using are based on the $\LaTeX$ [[https://ctan.org/pkg/exesheet][exesheet]] package. This allows me to easily typeset groups of problems either in single or multi-column mode. By default Org Mode uses the $\LaTeX$ /article/ document class, so the first step was to see if I could get Org Mode to use the /exesheet/ class and its associated features. The approach I used is described in the following useful video:

#+hugo: {{< youtube 0qHloGTT8XE >}}

The creator of that video posted the the associated resources [[https://jakebox.github.io/youtube/org_latex_video.html][here]].

According to that video, the first step was to set up a custom class so Org Mode could recognise the /exesheet/ package. I therefore added the following code to my Doom Emacs /config.el/ file:

#+begin_src elisp
(after! ox-latex
(add-to-list 'org-latex-classes
             '("org-exesheet"
               "\\documentclass{exesheet}
           [NO-DEFAULT-PACKAGES]
           [PACKAGES]
           [EXTRA]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))

(after! ox
  (require 'ox-extra)
  (ox-extras-activate '(ignore-headlines)))
#+end_src

The ~after!~ macros make sure that Doom emacs runs the configuration code at the appropriate time during start-up. The first one defines the custom document class that refers to the $\LaTeX$ exesheet package. The second one enables an extended feature that allows me use an Org Mode heading purely to structure my document and hide detail without creating a corresponding section heading in the final document.

The next step was to create a set-up file that includes a common set of preamble to declare packages and define macros that should be available to all my lesson note documents. I created a file called ~lesson-preamble.org~. Some highlights from that file:

#+begin_src
,#+LATEX_CLASS: org-exesheet
,#+LATEX_CLASS_OPTIONS: [12pt,a4paper,marginwidth=unset]
,#+OPTIONS: toc:nil
,#+LATEX_HEADER: \usepackage{amssymb} % Access to extra math symbols
,#+LATEX_HEADER: \usepackage{amsmath} % Access to extra math symbols
,#+LATEX_HEADER: \usepackage{diffcoeff}
...
#+end_src

The first line refers to the custom class I defined in my ~config.el~ Emacs configuration, and the second line sets up the page settings (eg. In Australia we normally use A4 size paper). The third line disables the generation of a table of contents, and then I list out the $\LaTeX$ packages that my lesson notes typically rely on.

After the packages, I then have some macro definitions:

#+begin_src
,#+LATEX_HEADER: \geometry{margin=1.5cm}
,#+LATEX_HEADER: \newcommand{\cloze}[1]{\underline{\hspace*{#1}}}
,#+LATEX_HEADER: \newcommand{\notes}[3][\empty]{%
,#+LATEX_HEADER:     \noindent\ifthenelse{\equal{#1}{\empty}}
,#+LATEX_HEADER:             {\\}
,#+LATEX_HEADER:             {\vspace{#1}\\}
,#+LATEX_HEADER:     \foreach \n in {1,...,#2}{%
,#+LATEX_HEADER:         \ifthenelse{\equal{#1}{\empty}}
,#+LATEX_HEADER:             {\rule{#3}{0.5pt}\\}
,#+LATEX_HEADER:             {\rule{#3}{0.5pt}\vspace{#1}\\}
,#+LATEX_HEADER:         }
,#+LATEX_HEADER: }
#+end_src

-   I set the margins to make better use of the available space on the worksheet (line 1).
-   The ~cloze~ macro (line 3) lets me easily create an underlined blank space for students to fill in during the lesson.
-   The ~notes~ macro (lines 5-14) allows me to create a set of lines for students to write their working out. I tend not to use this much, preferring to just leave some blank space for students to draw and write in as they wish.

**** Let's Make a Lesson!
Now that we've done the set-up, let's put together some lesson notes. The first thing is to create a file ending in ~.org~ and refer to the setup file we just made:

#+begin_src
,#+SETUPFILE: lesson-preamble.org
#+end_src

***** Title and Lesson Intentions
We will now create a Org section to display the lesson title and learning intentions:

#+begin_src org
,* Header :ignore:
,#+latex: \begin{center}\textsc{
  Y12 Advanced Topic 1: Differential Calculus \\
  Lesson 1: Introduction to Differentiation
,#+latex: }\end{center}\begin{small}\begin{singlespacing}\begin{tcolorbox}[fonttitle=\bfseries,title=\textbf{Learning intentions:}]

Students will:
,#+attr_latex: :options [itemsep=0pt]
- Revise the foundations of Indices, including index laws involving negative indices
- Revise fractional indices.

/Textbook Reference: Y11 Canbridge Advanced Ex. 7A, 7B/
,#+latex: \end{tcolorbox}\end{singlespacing}\end{small}
#+end_src

- In line 1, I use the tag ~:ignore:~ to supress the creation of a $\LaTeX$ ~\section~ header. While Org Mode headings will normally create sections and subsections in your document, this particular Org Mode heading is just there for organisational purposes, so that I can fold up and hide away this beginning part of the document and make it easier to navigate straight to the section(s) that I am currently working on.

- lines 2 and 5 output some $\LaTeX$ code to make the heading in lines 3 and 4 be printed in small caps and nicely centered. It also sets up a nice $\LaTeX$ ~tcolorbox~ to highlight the lesson intentions. The ~#+latex:~ lets you insert arbitrary lines of $\LaTeX$ code into the final document if you want to achieve effects not easily realised through the standard Org Mode structures.

  Technically, the ~tex and latex output logo math modetex and latex output logo math mode#+latex:~ is not required, because if Org Mode detects any $\LaTeX$ code in your document, it should automatically deal with in. In my Emacs theme though, the ~#~ at the front causes the line to be rendered in a dark grey font so that it fades into the background and doesn't distract so much from the "real" content.

- Next in lines 7-10, we define the learning intentions. We create a list in Org Mode, simply use a bullet character such as ~-~, ~+~ or ~*~ (that last one needs to be preceeded with white space so it is not interpreted as an Org Mode heading). On line 8 you see the ~#+attr_latex:~ directive which allows you to modify the $\LaTeX$ environment that follows, this this case an ~itemize~ bullet list. In this example, I decrease the separation between the bullet list items to make the list more compact. This technique can be used to tweak the appearance of other environments throughout the document.

- On line 12 I give a textbook reference that I normally highlight using italics, which in Org Mode is achieve by bracketing the text with ~/~ symbols (much nicer than writing ~\emph{italic text}~, isn't it?).

***** Warm up/Do Now
Most teachers understand the benefit of giving students something to get started on as soon as they sit down, the so-called "Do Now" activity. It not only helps students transition into the lesson; it also allows for some "formative assessment" to determine how well the students understand the previously-covered material.

I like to put the "Do Now" activity on the front page in a box. So, let's write a heading and give the student some warm-up exercises to do.

#+begin_src org
,* Warm-Up
,#+attr_latex: :options [colback=white]
,#+begin_tcolorbox
1. The inverse operation to *differentiation* is \cloze{3cm}
   \tcbline

2. For each of the following equations, find $\diff{y}{x}$

   ,#+attr_latex: :options [itemsep=2.8cm,after=\vspace{2cm}]
   1. $y=x^2$
   1. $y=\sin x$
   \tcbline

3. Differentiate the following:

   ,#+attr_latex: :environment tablenuma :options [after-item-skip=2.8cm,after-skip=2cm](2)
   1. $y=\cos(x)$
   2. $f(x)=\tan x$
   3. $g=\frac{1}{x^2}$
   4. $y=e^{\sin x}$
   ,#+latex: ~
,#+end_tcolorbox

#+end_src

- Line 1 contains an Org Mode header that will create a new section in the document (since there is no ~:ignore:~ tag).
- Next I create a ~tcolorbox~ around the warm-up exercises, not by typing $\LaTeX$ code directly, but by bracketing the content with a ~#+begin_tcolorbox ... #+end_tcolorbox~ pair. This is a general technique you can use to insert a $\LaTeX$ environment into your document, by typing ~#+begin_<environment>/ ... #+end_<environment>~, where ~<environment>~ is the name of the $\LaTeX$ environment you want to use.

  By default, a ~tcolorbox~ has a grey background. To supress that, you need to provide some options to the environment. That is of course done using the previously mentioned ~#+attr_latex:~ directive. You can see that line 2 sends the ~tcolorbox~ an option to make its background white.

- Line 4, I ask the first question, using a stock-standard numbered list. I use the ~\cloze{}~ macro I defined earlier to give the students an underlined writing space to fill it -- just specify the length of the line in the curly braces.

- Line 7 contains the next question, which consists of some sub-questions. If I want to write any inline maths notiation, I enclose it in ~$ ... $~ symbols just like in regular $\LaTeX$. If you have currency in your text, this can cause problems, so an alternative is to use ~\( ... \)~.

  To separate this question form the next, I put a ~\tcbline~ separator (which you can prefix with a ~#+latex:~ directive if you choose). It is important to indent it properly so Org Mode doesn't think this is the end of the numbered list.

- Next I want to list out the subparts to the question. I start a new numbered list that is indented. Here I used ~1.~ to indicate a list item, but it doesn't really matter what number you write here. In the output, the indented items will be written with letters (a), (b), (c) etc.. You may notice I even doubled up on the number ~1.~ -- it doesn't matter, $\LaTeX$ will take care for the correct numbering.

  Students will need space to write their answers, so at the start of the list I include a ~#+attr_latex:~ directive where I set the spacing between list items using ~itemsep=2cm~.

- For the final question, I show you a special list environment provided by the ~exesheet~ package: the ~tablenuma~ list. This allows you to set your problems using multiple columns, great for many short questions that don't need to take up a whole line.

  I again use an Org Mode numbered list, but I need to tell Org Mode to use the ~tablenuma~ environment by specifying ~:environment tablenuma~ parameter. Again, I want to give the students some writing space. However, this environment doesn't use ~itemsep~; instead it uses ~after-item-skip~ to put space between items and ~after-skip~ to put space at the end of the list.

  One problem with ~after-skip~ is that if you don't continue with a normal paragraph, the space at the end gets "swallowed up" by $\LaTeX$. A hack you can use is to put an invisible white space at the end using the ~#+latex: ~~ like I did in line 21.

***** Lesson Body
Now we can get to the meat of the lesson.

#+begin_src org
\newpage

,* Differentiation Rules
To differentiate a combination of functions, we have a number of rules.

,** Product Rule
To differentiate the product of functions $y=u(x) \times v(x)$, use the product rule:
\[y = u'v + uv'\]

\exe Differentiate $y=x \sin x$
\vspace{3cm}

,* Gradients
To calculate a gradient:

\begin{tikzpicture}
  \begin{axis}[
    minor tick num=0,
    axis x line=middle, axis y line=middle,
    xlabel=$x$,ylabel=$y$,
    xmin=-2, xmax=5, ymin=-2, ymax=5,
    xtick=\empty,
    extra x ticks={1,3},
    extra x tick labels={$x_1$,$x_2$},
    ytick=\empty,
    extra y ticks={1.8,3.4},
    extra y tick labels={$y_1$,$y_2$},
    ]
    \addplot [mark=none,domain=-0.5:4] {1+0.8*x};
    \addplot [mark=*] plot [
    error bars/.cd,
    y dir=minus,y fixed relative=1,
    x dir=minus, x fixed relative=1,
    error bar style={dotted},
    ] coordinates {(1,1.8) (3,3.4)};
    \draw (axis cs:3,3.4) |- (axis cs:1,1.8) node at (axis cs:2,1.5) {$x_2-x_1$} node at (axis cs:3.8,2.6) {$y_2-y_1$};
  \end{axis}
\end{tikzpicture}

,#+attr_latex: :options [fonttitle=\bfseries,title={Gradient Formula}]
,#+begin_tcolorbox
To find the gradient:
  \begin{align*}
    \text{Gradient} &= \frac{\text{rise}}{\text{run}} \\
                    &= \frac{y_2-y_1}{x_2-x_1}
  \end{align*}
,#+end_tcolorbox

\exe Find the gradient of the line segment joining the points $P(1,2)$ and $Q(3,4)$
\vspace{1cm}
#+end_src

Here you see the Org Mode headings being translated to the different sections and subsections, and we can "fold away" any detail we don't want to see.
- We start on a fresh page using ~\newpage~

- We use Org Mode headings to add in new sections/subsections of the lesson, and we can use Org Mode's visibility cycling (~<TAB>~ key) to hide sections.

- I have used the ~exesheet~ command "~\exe~" to introduce an example that I want to work through with the students. By default the numbering of the ~\exe~ examples/exercises is global across the whole document.

- I've included a TikZ diagram, just to show how you can freely insert $\LaTeX$ code as needed.

***** Set Some Classwork/Homework

Finally, you might want to set the students some exercises from the textbook.

#+begin_src org
,* Classwork/Homework
,#+begin_tcolorbox
Year 12 Awesome Maths Textbook
- Ex. 13A Q2-11, 14, 15.
,#+end_tcolorbox
#+end_src

**** Export to PDF

Now that we have written up our lesson notes, we can export to LaTeX/PDF. To make a PDF file, I might type something like ~C-c C-e l p~, and I will get a PDF lookin something like this.

#+hugo: {{< embed-pdf url="20250105_example-lesson.pdf" >}}

**** Final Thoughts
The examples I gave were heavy in LaTeX code because I wanted to showcase the sorts of things that could be done when exporting from Org Mode. Overall, the collapsible headings in Org Mode make it easy to find your way around a complicated document, and it is possible to add even more Org Mode headings with the ~:ignore:~ tag if you want to make certain parts of the document collapsible.

I didn't show any examples of tables. Org Mode has a powerful table editor which makes tables much easier to produce and manage, and if you want to customise the look of a table, you can use the ~#+attr_latex:~ directive to tell Org Mode to use the powerful ~tblr~ package that all $\LaTeX$ users should learn about if they haven't already.

One thing I would like to explore further is the embedding of code to generate content -- for example, to produce tables of $z$-values programatically.

** Graphite Keyboard Layout
*** DONE Graphite Keyboard Layout :Computers:Keyboards:AltKeyboardLayouts:MechKeyboard:SplitKeyboard:Gallium:Graphite:
:PROPERTIES:
:CUSTOM_ID: graphite-keyboard-layout
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20241229_graphite-keyboard-layout
:EXPORT_DATE: 2024-12-29
:EXPORT_DESCRIPTION: 20241229-graphite_layout.png
:END:
I've been using the [[#update-gallium-keyboard-layout][Gallium keyboard layout]] for a couple of months now, and I'm pretty happy with it for typing letters. However, I've been curious whether I could do any better in terms of punctuation. This has led me to investigate the Graphite layout to see what I might be missing out on.
#+hugo: more

**** Why I Care
The Graphite layout is very similar to Gallium, but has some optimisations concerning punctuation. I've been keen to try it out, but something has been holding me back. To understand, let's take a look at Graphite mapped to a $6 \times 4$ split keyboard like the ZSA Voyager:

#+begin_example
  ! @ # $ %  ^ & * ( ) +
~ B L D W Z  _ F O U J :
| N R T S G  Y H A E I ?
  Q X M C V  K P > " <

  1 2 3 4 5  6 7 8 9 0 =
` b l d w z  ' f o u j ;
\ n r t s g  y h a e i ,
  q x m c v  k p . - /
#+end_example

The top four rows show the shifted versions of the keys, whereas the bottom four rows shows the regular unshifed layout.
Some things to note are that some of the shifted punctuation keys are different to what you normally get on a standard keyboard layout. For example,
- a shifted hyphen (-) gives a double quote (~"~), not an underscore (~_~).
- a shifted apostrophe (~'~) gives an underscore (~_~), not a double quote (~"~)
- a shifted slash (~/~) gives a less-than sign (~<~), not a question mark (~?~)

There are also a couple of other tweaks that interested me, such as moving the ~C~ and ~V~ to the more easily reachable bottom row, and putting ~D~, ~W~ and ~:~ (from my Symbol layer) closer together for some more convenient Vim shortcuts.

The creator of the Gallium layout explains in the [[https://github.com/rdavison/graphite-layout][Graphite GitHub Repository]] the rationale behind splitting the normal association between shifted and unshifted punctuation characters, but in short it comes down to avoiding some common Single Finger Bigrams (SFBs) involving punctuation characters. It sounds great in theory, but can create some difficulties in the implementation. While I had no problems to implement this layout on my Corne keyboard running Vial/QMK, it was a different story for my ZSA Voyager which has become my daily driver.

The issue was that keyboards don't send characters; they send scancodes. If for example you press ~shift~ and ~/~, the keyboard will send the scancodes for those two keys. It is then up to the keyboard logic in your computer's operating system to put those two scancodes together and make the decision to send a ~?~ character to the running application -- the keyboard gets no say in this.

So, if you want this logic to be handled by your keyboard so that when you press ~shift~ and ~/~ your application sees a ~<~ character, your keyboard needs to detect when you press ~shift~ and ~/~, and then 'lie' to your computer by sending the scancodes for the ~shift~ and ~,~ (comma) keys so that the OS sends your application a ~<~ character. The feature in QMK which allows your keyboard to lie in such a manner is called [[https://docs.qmk.fm/features/key_overrides][Key Overrides]]. This feature is easily configured on a keyboard running QMK Vial (like my Corne), but it is unfortunately not supported by ZSA's Oryx web configutation tool. I wanted to keep all my keyboard layouts as consistent as possible, and I wanted to continue using the Oryx configuration tool, so I was hesitant to move to Graphite. However, a small ray of hope soon arrived in my email inbox...

**** A Glimmer of Hope from ZSA
As a ZSA customer, I receive from them a regular newsletter from them, which led me to an article with the title "[[https://blog.zsa.io/oryx-custom-qmk-features/][Using a DIY tool to add custom features to your Oryx layout]]". This sounded just like what I was waiting for!

The concept is that you maintain the majority of your layout using the Oryx web configutator. However, if you want to enable an additional "unsupported" feature -- like, say, key overrides -- you take the QMK code generated by Oryx and merge in your desired changes into the keymap code. The author of the article provides instructions and scripts that help to automate this process. I had previously built custom QMK firmware for my Corne keyboards with no issues, so I was keen to give this a try.

I followed the instructions in the article and soon had a customised build of my Oryx layout with the required key overrides enabled and configured. I flashed the new firmware to my Voyager, and it sprung back to life... until I pressed a key, that is. The keyboard froze! The firmware would initiase, but it would crash as soon as I tried to type something. I experimented, thinking I may have messed up the key override code, but it would crash even when I didn't make any changes to the base Oryx code. There could be an issue with the build scripts/tools supplied by the author of the article, but I didn't have time to try to debug it and instead decided to stick with the Gallium layout that was already serving me quite well.

**** A New Way Forward (aka "Tap Dancing" around the problem)
I continued to use my Gallium layout, writing lesson notes for my students in $\LaTeX$, and I wondered how the Graphite layout would perhaps make it easier to type all that $\LaTeX$ code. A new idea started to form: what if, instead of messing around with shifted punctuation, I used the "tap dance" feature to implement the required key mappings for my punctuation? This would be similar to the "Auto Caps" feature where you hold down a key to get its shifted version. Tap-dance has the flexibility to output whatever scancode(s) you like when you hold down a key. An added benefit is that I can still use the

This was very easy to implement using the Oryx tool, and doesn't require the use of and unsupported/untested features that could mess with the stability of my keyboard. I applied the needed changes to my Oryx layout, and you can inspect it using the following [[https://configure.zsa.io/voyager/layouts/34PvY/latest/0][Oryx link]].

I'm going to perservere with this new layout for a while, and I'll report back here how it goes!

** Migrating my Blog from Wordpress to Org Mode
*** DONE Migrating my Blog from Wordpress to Org Mode :Emacs:OrgMode:Esperanto:Shavian:𐑖𐑱𐑝𐑾𐑯:
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20241226_org-mode-blog
:EXPORT_DATE: 2024-12-26
:EXPORT_HUGO_MENU:
:END:

Lately I have been using Org Mode with Emacs quite a bit to help get better organised at work and keep track of meetings. The next logical step was to migrate my blog away from Wordpress and integrate it into my Org Mode workflow.

The benefits are:
#+hugo: more
- not having to host and maintain a Wordpress instance on my home computer, the with security risks that that entails.
- a static website hosted on GitHub will generally load quicker, and is not dependent on a consumer-grade internet connection that goes down from time to time.
- since I am already using Org Mode/Emacs in my day-to-day work, it is convenient having a common format for all my notes, be they personal or for publication.

Now that I am on the Christmas break, I have had some time to investigate the various options, and I have settled on using ox-hugo to export my Org Mode blog posts and documents to a Hugo website using the ''KeepIt'' theme. This theme has some nice features such as $\KaTeX$ support for rendering maths equations and multi-lingual support for writing articles in other languages/scripts (such as Esperanto or the Shavian alphabet).

I've now reached the point where I think I can now decommission the Wordpress website, so let's see how we go!

If you feel like a bit of a chuckle, check out this video on the ubiquitousness of Emacs:

#+hugo: {{< youtube urcL86UpqZc >}}

*** DONE 𐑥𐑲𐑜𐑮𐑱𐑑𐑦𐑙 𐑥𐑲 𐑚𐑤𐑪𐑜 𐑓𐑮𐑪𐑥 ·𐑢𐑻𐑛𐑐𐑮𐑧𐑕 𐑑 ·𐑹𐑜 𐑥𐑴𐑛 :𐑰𐑥𐑨𐑒𐑕:𐑹𐑜𐑥𐑴𐑛:𐑧𐑕𐑐𐑼𐑭𐑯𐑑𐑴:𐑖𐑱𐑝𐑾𐑯:
:PROPERTIES:
:EXPORT_FILE_NAME: index.en-shaw.md
:EXPORT_HUGO_BUNDLE: 20241226_org-mode-blog
:EXPORT_DATE: 2024-12-26
:EXPORT_HUGO_MENU:
:END:

𐑤𐑱𐑑𐑤𐑦 𐑲 𐑣𐑨𐑝 𐑚𐑰𐑯 𐑿𐑟𐑦𐑙 ·𐑹𐑜 𐑥𐑴𐑛 𐑢𐑦𐑞 ·𐑰𐑥𐑨𐑒𐑕 𐑒𐑢𐑲𐑑 𐑩 𐑚𐑦𐑑 𐑑 𐑣𐑧𐑤𐑐 𐑜𐑧𐑑 𐑚𐑧𐑑𐑼 𐑹𐑜𐑨𐑯𐑲𐑟𐑛 𐑨𐑑 𐑐𐑻𐑒 𐑯 𐑒𐑰𐑐 𐑑𐑮𐑨𐑒 𐑝 𐑥𐑰𐑑𐑦𐑙𐑟. 𐑞 𐑯𐑧𐑒𐑕𐑑 𐑤𐑪𐑡𐑦𐑒𐑩𐑤 𐑕𐑑𐑧𐑐 𐑢𐑩𐑟 𐑑 𐑥𐑲𐑜𐑮𐑱𐑑 𐑥𐑲 𐑚𐑤𐑪𐑜 𐑩𐑢𐑱 𐑓𐑮𐑪𐑥 ·𐑢𐑻𐑛𐑐𐑮𐑧𐑕 𐑯 𐑦𐑯𐑑𐑩𐑜𐑮𐑱𐑑 𐑦𐑑 𐑦𐑯𐑑𐑵 𐑥𐑲 ·𐑹𐑜 𐑥𐑴𐑛 𐑢𐑻𐑒𐑓𐑤𐑴.

𐑞 𐑚𐑧𐑯𐑩𐑓𐑩𐑑𐑕 𐑸:
- 𐑯𐑪𐑑 𐑣𐑨𐑝𐑦𐑙 𐑑 𐑣𐑴𐑑𐑕 𐑯 𐑥𐑱𐑯𐑑𐑱𐑯 𐑩 ·𐑢𐑻𐑛𐑐𐑮𐑧𐑕 𐑦𐑯𐑕𐑑𐑩𐑯𐑕 𐑪𐑯 𐑥𐑲 𐑣𐑴𐑥 𐑒𐑪𐑥𐑐𐑿𐑑𐑼, 𐑢𐑦𐑞 𐑞 𐑕𐑧𐑒𐑿𐑮𐑩𐑑𐑦 𐑮𐑦𐑕𐑒𐑕 𐑞𐑨𐑑 𐑞𐑨𐑑 𐑧𐑯𐑑𐑲𐑤𐑟.
- 𐑩 𐑕𐑑𐑨𐑑𐑦𐑒 𐑢𐑧𐑚𐑕𐑲𐑑 𐑣𐑴𐑑𐑕𐑩𐑛 𐑪𐑯 ·𐑜𐑦𐑑𐑣𐑳𐑚 𐑢𐑦𐑤 𐑡𐑧𐑯𐑼𐑩𐑤𐑦 𐑤𐑴𐑛 𐑒𐑢𐑦𐑒𐑼, 𐑯 𐑦𐑑 𐑦𐑟 𐑯𐑪𐑑 𐑛𐑩𐑐𐑧𐑯𐑛𐑩𐑯𐑑 𐑪𐑯 𐑩 𐑒𐑪𐑯𐑕𐑿𐑥𐑼-𐑜𐑮𐑱𐑛 𐑦𐑯𐑑𐑼𐑯𐑧𐑑 𐑒𐑪𐑯𐑧𐑒𐑖𐑩𐑯 𐑞𐑨𐑑 𐑜𐑴𐑟 𐑛𐑬𐑯 𐑓𐑮𐑪𐑥 𐑑𐑲𐑥 𐑑 𐑑𐑲𐑥.
- 𐑕𐑦𐑯𐑕 𐑲 𐑨𐑥 𐑷𐑤𐑮𐑧𐑛𐑦 𐑿𐑟𐑦𐑙 ·𐑹𐑜 𐑥𐑴𐑛/𐑰𐑥𐑨𐑒𐑕 𐑦𐑯 𐑥𐑲 𐑛𐑱 𐑑 𐑛𐑲 𐑢𐑻𐑒, 𐑦𐑑 𐑦𐑟 𐑒𐑩𐑯𐑝𐑰𐑯𐑾𐑯𐑑 𐑣𐑨𐑝𐑦𐑙 𐑩 𐑒𐑪𐑥𐑩𐑯 𐑓𐑹𐑥𐑨𐑑 𐑓𐑹 𐑷𐑤 𐑥𐑲 𐑯𐑴𐑑𐑕, 𐑚𐑰 𐑞𐑲 𐑐𐑻𐑕𐑩𐑯𐑩𐑤 𐑹 𐑓𐑹 𐑐𐑳𐑚𐑤𐑦𐑒𐑱𐑖𐑩𐑯.

𐑯𐑬 𐑞𐑨𐑑 𐑲 𐑨𐑥 𐑪𐑯 𐑞 ·𐑒𐑮𐑦𐑕𐑥𐑩𐑕 𐑚𐑤𐑱𐑒, 𐑲 𐑣𐑨𐑝 𐑣𐑨𐑛 𐑕𐑳𐑥 𐑑𐑲𐑥 𐑑 𐑦𐑯𐑝𐑧𐑕𐑑𐑦𐑜𐑱𐑑 𐑞 𐑝𐑺𐑾𐑕 𐑪𐑐𐑖𐑩𐑯𐑟, 𐑯 𐑲 𐑣𐑨𐑝 𐑕𐑧𐑑𐑩𐑤𐑛 𐑪𐑯 𐑿𐑟𐑦𐑙 ·𐑪𐑒𐑕-𐑣𐑿𐑜𐑴 𐑑 𐑧𐑒𐑕𐑐𐑹𐑑 𐑥𐑲 ·𐑹𐑜 𐑥𐑴𐑛 𐑚𐑤𐑪𐑜 𐑐𐑴𐑑𐑕𐑑 𐑯 𐑛𐑪𐑒𐑿𐑥𐑩𐑯𐑑𐑕 𐑑 𐑩 ·𐑣𐑿𐑜𐑴 𐑢𐑧𐑚𐑕𐑲𐑑 𐑿𐑟𐑦𐑙 𐑞 ''𐑒𐑰𐑐𐑦𐑑'' 𐑔𐑰𐑥. 𐑞𐑦𐑕 𐑔𐑰𐑥 𐑣𐑨𐑟 𐑕𐑳𐑥 𐑯𐑲𐑕 𐑓𐑰𐑗𐑩𐑟 𐑕𐑳𐑗 𐑕𐑡 𐑨𐑟 ·𐑒𐑱𐑑𐑧𐑒 𐑕𐑩𐑐𐑹𐑑 𐑓𐑹 𐑮𐑧𐑯𐑛𐑼𐑦𐑙 𐑥𐑨𐑔𐑕 𐑰𐑒𐑐𐑱𐑠𐑩𐑯𐑟 𐑯 𐑥𐑳𐑤𐑑𐑦𐑤𐑦𐑯𐑜𐑐𐑩𐑤 𐑕𐑩𐑐𐑹𐑑 𐑓𐑹 𐑮𐑲𐑑𐑦𐑙 𐑸𐑑𐑦𐑒𐑩𐑤𐑟 𐑦𐑯 𐑳𐑞𐑼 𐑤𐑨𐑙𐑜𐑢𐑦𐑡𐑩𐑟/𐑕𐑒𐑮𐑦𐑓𐑑𐑕 (𐑕𐑳𐑗 𐑨𐑟 ·𐑧𐑕𐑐𐑼𐑭𐑯𐑑𐑴 𐑹 𐑞 𐑖𐑱𐑝𐑾𐑯 𐑨𐑚𐑓𐑩𐑚𐑧𐑑).

𐑲𐑝 𐑯𐑬 𐑮𐑰𐑗𐑑 𐑞 𐑐𐑶𐑯𐑑 𐑣𐑢𐑺 𐑲 𐑔𐑦𐑙𐑒 𐑲 𐑒𐑨𐑯 𐑛𐑰𐑒𐑩𐑥𐑦𐑖𐑩𐑯 𐑞 ·𐑢𐑻𐑛𐑐𐑮𐑧𐑕 𐑢𐑧𐑚𐑕𐑲𐑑, 𐑕𐑴 𐑤𐑧𐑑𐑕 𐑕𐑰 𐑣𐑬 𐑢𐑰 𐑜𐑴!

𐑦𐑓 𐑿 𐑓𐑰𐑤 𐑤𐑲𐑒 𐑩 𐑚𐑦𐑑 𐑝 𐑩 𐑗𐑳𐑒𐑩𐑤, 𐑗𐑧𐑒 𐑬𐑑 𐑞𐑦𐑕 𐑝𐑦𐑛𐑦𐑴 𐑪𐑯 𐑞 𐑿𐑚𐑦𐑒𐑢𐑦𐑑𐑩𐑕𐑯𐑩𐑕 𐑝 𐑰𐑥𐑨𐑒𐑕:

#+hugo: {{< youtube urcL86UpqZc >}}

*** DONE Migrating Blog from Wordpress to Org Mode :Emacs:OrgMode:Esperanto:Shavian:𐑖𐑱𐑝𐑾𐑯:
:PROPERTIES:
:EXPORT_FILE_NAME: index.eo.md
:EXPORT_HUGO_BUNDLE: 20241226_org-mode-blog
:EXPORT_DATE: 2024-12-26
:EXPORT_HUGO_MENU:
:END:

Lastatempe mi uzis sufiĉe ofte Org-reĝimon kun Emacs por pli bone organizi ĉe oficejo kaj spuri kunvenojn. La venonta logika paŝo estis migrigi mian blogon el Wordpress kaj integri ĝin en mian Org-reĝiman laborfluon.

La profitoj estas:
- ne plu devi gastisi kaj subteni Wordpress-an instancon ĉe mia hejma komputilo, kun la sekurecaj riskoj kiujn tio kunportas.
- statika retejo gastigita ĉe GitHub ĝenerale ŝarĝas pli rapide kaj ne dependas de konsumanta grado de interreta alliĝo kiu malfunkcias de tempo al tempo.
- pro tio ke mi jam uzadas Emacs/Org-reĝimon en mia ĉiutaga laboro, estas oportuna havi unuigitan formaton por ĉiuj miaj notoj, ĉu personaj aŭ ĉu por eldonado.

Pro tio ke okazas la kristnaska ferio, mi havas la tempon esplori la diversajn eblecojn, kaj mi alvenis al uzi ox-hugo-n por eksporti miajn Org-reĝimajn blogafiŝojn kaj dokumentojn al Hugo retejo bazite je la ''KeepIt'' retejtemo. Tiu temo posedas utilajn funkciojn kiel subteno de $\KaTeX$ por aperigi matematikajn ekvaciojn, kaj multlingva subteno por verki artikolojn per aliaj lingvoj/alfabetoj (kiel Esperanto aŭ la Ŝava alfabeto).

Mi nun atingis la tempopunkton kiam mi kredas ke mi povas malstarigi la Wordpress-an retejon, do ni vidu kiel mi faros!

Se vi volas ion por ridetigi vin, spektu la suban videon pri la ĉiel utila Emacs:

#+hugo: {{< youtube urcL86UpqZc >}}

** Updates to Gallium Keyboard Layout
*** DONE Updates to Gallium Keyboard Layout :Computers:Keyboards:AltKeyboardLayouts:MechKeyboard:SplitKeyboard:Gallium:Graphite:ISRT:Vial:
:PROPERTIES:
:CUSTOM_ID: update-gallium-keyboard-layout
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20241010_updates-to-gallium-keyboard-layout
:EXPORT_DATE: 2024-10-10
:EXPORT_DESCRIPTION: 20241010-Screenshot_2024-10-10_18-16-04-1024x234.png
:END:

I’ve been practising on the Gallium layout that I mentioned [[#gallium-keyboard-layout][last time]], and while I am still fighting the muscle memory that I built up with the ISRT layout, I am gradually getting used to it and am currently at around the 25 wpm mark (similar to my maximum speed in Morse Code).
#+hugo: more

Today I noticed that Ben Vallack has released [[https://youtu.be/DKQ4pOoFh5I?si=0OaoCPKk2vhdDGT7][another video]] on keyboard layouts, and I was interested to learn that he has moved on from the ISRT layout, instead adopting the [[https://github.com/rdavison/graphite-layout][Graphite layout]]. That layout is actually very similar to the Gallium layout that I have been learning. It has the same NRTS-HAEI home keys, making it a high-alternating layout like Gallium. He said that as his speed increased on the ISRT layout, he noticed that some of the scissors and same-finger skipgrams were starting to bother him (see the [[https://bit.ly/layout-doc-v2][Alt Keyboard Layout Guide]] for definitions of these terms). While my own typing speed is still too low to encounter these problems, it is nice to have some external validation for my decision to move from ISRT to [[https://github.com/GalileoBlues/Gallium][Gallium]].

One interesting thing about Graphite is the punctuation — the shifted form of some of the punctuation keys differs from the usual setup. When I looked into Graphite earlier, I investigated how one might implement that on my various keyboards.

For my Corne keyboards which run the Vial QMK-based firmware, it is actually pretty simple. QMK has a feature called ``[[https://docs.qmk.fm/features/key_overrides][Key Overrides]]'' which allow you to remap the outputted scan code of a shifted key combo to whatever you want, and Vial exposes this feature in its configuration GUI. Similarly, it is trivial to remap keycodes for shifted keys in OS-based software like [[https://karabiner-elements.pqrs.org/][Karabiner Elements]] (for macOS) or [[https://github.com/kmonad/kmonad][KMonad]] (multi-platform).

For the ZSA Voyager keyboard however, the story is a bit more complicated. The Key Override feature is not exposed in ZSA’s Oryx web configuration tool. This means that if you want to implement Graphite’s punctuation mappings using Oryx, you would probably need to use some awkward setup involving layers for shifted characters. You could of course program a keymap in QMK that uses key overrides and flash that firmware directly to the Voyager, but you would then forego the benefits of using Oryx to tweak and share your layout with others. I could see from Ben Vallack’s video that he had implemented his Graphite layout using Oryx, and so I was very interested to see how he had managed to navigate this problem.

A quick search in the Oryx tool turned up his [[https://configure.zsa.io/voyager/layouts/XgZ46/latest/0][Graphite configuration]]. As you can see, he didn’t bother to fully implement Graphite’s punctuation setup at all. I shouldn’t have been too surprised by this; Graphite was really designed for standard row-staggered keyboards without layers, and so of course an experienced alt keyboard layout hacker like Ben would be very comfortable using layers for his symbols like in his preceding layouts. It was nevertheless illuminating to study the layout of his base layer to see if there were any optimisations I might want to consider for my own [[https://configure.zsa.io/voyager/layouts/KWgaz/latest/0][Gallium-based layout]].

Some other discoveries I made recently from Ben’s new video and from other sources:

- ZSA have released a new typing training tool outside the one they have on their Oryx page. The new tool works with non-ZSA keyboards, and is somewhat reminiscent of MonkeyType. You can find the new tool at the easy-to-remember URL: https://typ.ing/
- If you want to get a “feel” for a new layout without going to the full effort of learning it, there is a web tool you can use to translate a target text into the equivalent letters you would need to press on your existing layout. The tool can be found at: https://keyboard-layout-try-out.pages.dev/
- The Gallium layout has just been released in DreymaR’s [[https://github.com/DreymaR/BigBagKbdTrixPKL/tree/master/Layouts/Gallium][EPKL key mapping tool]]. This tool is Windows-based, which means that I have very little use for it myself. One of the cool features it has though is the Extend layer which converts the mostly useless CAPSLOCK key into a layer-switching key. This is such a useful feature, which I have implemented on my macbook using [[https://karabiner-elements.pqrs.org/][Karabiner Elements]]. The config file I use is available in [[https://github.com/matt-maguire/kbd_firmware/blob/custom/keyboards/crkbd/vial-kb/karabiner.json][my github]].

** Gallium Keyboard Layout
*** DONE Gallium Keyboard Layout :Computers:Keyboards:AltKeyboardLayouts:MechKeyboard:SplitKeyboard:Gallium:Graphite:ISRT:
:PROPERTIES:
:CUSTOM_ID: gallium-keyboard-layout
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20241002_gallium-keyboard-layout
:EXPORT_DATE: 2024-10-02
:EXPORT_DESCRIPTION: 20241002-gallium-1536x678.png
:END:

I’ve been using the ISRT keyboard layout for a while now, and it is becoming more intuitive to type on. However, I’ve been hearing a lot about [[https://github.com/rdavison/graphite-layout][Graphite]] and [[https://github.com/GalileoBlues/Gallium][Gallium]] on the Alt Keyboard Layout forums, which has made me a little curious. So, I set up a keymap to see what all the fuss is about.
#+hugo: more

Graphite and Gallium are very similar layouts at their core. They both put all the vowels in a block on the right hand with an “OA” stack on the middle finger. They then put the letter “H” on the vowel hand on the index finger, and the letter “N” on the pinky finger of the consonant hand. Since, in English, the letter “N” is typically preceded by a vowel and followed by a consonant, and the letter “H” is typically preceeded by consonant and followed by a vowel, this encourages a high alternation between hands with a left-to-right rolling tendency that results in very low redirects (where the rolling pattern in one hand changes direction mid-word). Redirects are a known weakness of the ISRT and other Colemak-like layouts, so I am very interested to compare them against the NRTS-HAEI family of layouts like Gallium and Graphite.

On doing some reading, it seems that Graphite is better optimised for traditional row-staggered keyboards whereas Gallium may be better suited to column-staggered keyboards like my Voyager and Corne split keyboards. I also saw some remarks that Gallium may be more “Vim-friendly”. However, the two layouts are actually fairly similar, differing mostly in the punctuation and index-finger keys. Based on this, I chose to explore the Gallium layout.

It turns out that there are actually two versions of Gallium: v1 and v2. The latter one mainly seems to be tweaked to take advantage of the reduced distance between the homerow inner column of the right hand index finger and the “OU” on the top row on a row-staggered keyboard. Since I mainly plan to use col-stag keyboards, I chose to go with v1:

#+begin_example
b l d c v   j y o u , -
n r t s g   p h a e i ;
q x m w z   k f ' / .
#+end_example

There are a few departures from the published Gallium v1 layout:

- I swapped the semicolon (;) and forward slash (/). This is because I wanted the layout to work on my Corne Mini, which lacks an outer pinky column. Putting the slash on the base layer makes it easier to type filenames and web addresses and, more importantly, gives access to the question mark (?) without having to dive into a layer.
- I considered swapping the “C” and “W” keys, which someone recommended to make the layout even more Vim-friendly. It would also move the potentially destructive “W” shortcut off the bottom row, but for now I think I’ll stick with the standard arrangement until I get more experience with the layout.
- I did decide to swap the “X” and “Q” keys. The order of those two keys has very little effect on the performance of the layout, but when implementing the layout on a row-staggered keyboard using an angle mod, it makes it easier to use “Ctrl-X” in Emacs, and also makes it harder to accidentally type the destructive “Ctrl-Q” shortcut.

Here is the row-staggered angle-modded Gallium layout that I implemented on my Macbook keyboard using [[https://karabiner-elements.pqrs.org/][Karabiner Elements]] (the karabiner.json config file is in my [[https://github.com/matt-maguire/kbd_firmware/tree/custom/keyboards/crkbd/vial-kb][github repo]]):

#+begin_example
` 1 2 3 4 5 6 7 8 9 0 = [
   b l d c v j y o u , - ] \
    n r t s g p h a e i ;
     x m w z q k f ' / .
#+end_example

I also created a [[https://configure.zsa.io/voyager/layouts/KWgaz/94W5A/0][layout for my ZSA Voyager]] using their web configuration tool.

[[file:20241002-Screenshot_2024-10-02_17-33-57-1024x589.png]]

Before I had the “Shift” modifier on a left thumb key and the “Control” modifier on a right thumb key. It is common at the end of a sentence to have a space followed by a capital letter. By having “Space” and “Shift” together on the left thumb cluster, this creates an awkward same-finger motion on the left thumb, so I moved the “Shift” key to the right thumb cluster.

I’m going to spend a little time building some fluency with this new layout to see if it is really worthwhile compared to ISRT, and will keep you updated here on what I discover.

** New Choc Switches Have Arrived!
*** DONE New Choc Switches Have Arrived! :Computers:Keyboards:Corne:MechKeyboard:
:PROPERTIES:
:CUSTOM_ID: new-choc-switches-have-arrived
:EXPORT_HUGO_BUNDLE: 20240914_new-choc-switches-have-arrived
:EXPORT_FILE_NAME: index.en.md
:EXPORT_DATE: 2024-09-14
:EXPORT_DESCRIPTION: 20240914-IMG_0442-1152x1536.jpg
:END:

I have been really enjoying the Choc Red switches that shipped with my [[#zsa-voyager-has-arrived][ZSA Voyager keyboard]]. I was however curious how a lighter-weight switch might feel. I was considering ordering some Pro Red 35g linear switches, but then I heard about the [[https://keebd.com/products/ambients-silent-linear-twilight-choc-switches][Kailh Ambients]] line of silent linear switches and decided to give the Twilight 35g switches a try. On ordering them from a local vendor, they arrived a few days later, and on my Voyager keyboard I swapped out the Choc Reds for the Ambients Twilights.
#+attr_html: alt="Left half of a ZSA Voyager split keyboard with one keycap at the top left removed to expose a light green coloured Ambients Twilight silent linear low profile switch."

[[file:20240914-IMG_0445-1536x1503.jpg]]

They do have a lovely feel with the soft cushioning/damping at the end of the switch’s travel, although when typing with them I felt my error rate creeping up. I found that with the soft feel of the switches, I was pressing them a bit more slowly and hesitantly, which was causing false activations on my layer-tap and mod-tap keys. So, I need to be a bit more diligent about “tapping” rather than “pressing” the keys. I also have not had a lot of time for focused typing practice lately due to a slightly hectic schedule at work this time of year, and I’ve seen my typing speed drop off a bit. I’m sure it won’t take long to get back to my previous speed.

I decided to populate my Corne 6×3 keyboard with the Choc Reds I removed from my Voyager. I removed the Choc Browns, inserted the Choc Reds and replaced the keycaps.

#+attr_html: alt="Left half of a Corne 6x3 ergoomic split keyboard with one keycap at the top left removed to expose a Choc Red low profile linear keyswitch."
[[file:20240914-IMG_0443-1536x1093.jpg]]

In the Corne the Choc Reds don’t feel quite as nice as when they were in the Voyager — I put this down to the more solid construction of the Voyager. However, the Choc Reds in the Corne feel much better than the Choc Browns they replaced, with less effort required (50g vs 60g, and no scratchy “tactile bump” such as it is in the low profile Choc switches).

In my Corne 5×3 keyboard, I still have the Choc Brown switches that the keyboard shipped with.

#+attr_html: alt="Left half of Corne 5x3 mini ergoomic split keyboard with one keycap at the top left removed to expose a Choc Brown low profile tactile keyswitch."
[[file:20240914-IMG_0446-1536x1261.jpg]]

I think I’ll eventually swap them out for some spare Choc Red switches that I ordered, but for now I’ll leave the Choc Browns in place so I have a baseline point of comparison.

*** DONE 𐑯𐑿 ·𐑗𐑪𐑒 𐑕𐑢𐑦𐑗𐑩𐑟 𐑣𐑨𐑝 𐑼𐑲𐑝𐑛! :𐑒𐑩𐑥𐑐𐑿𐑑𐑼𐑟:𐑒𐑰𐑚𐑹𐑛𐑟:
:PROPERTIES:
:CUSTOM_ID: new-choc-switches-have-arrived.en-shaw
:EXPORT_HUGO_BUNDLE: 20240914_new-choc-switches-have-arrived
:EXPORT_FILE_NAME: index.en-shaw.md
:EXPORT_DATE: 2024-09-14
:EXPORT_DESCRIPTION: 20240914-IMG_0442-1152x1536.jpg
:END:

𐑲 𐑣𐑨𐑝 𐑚𐑰𐑯 𐑮𐑰𐑤𐑦 𐑧𐑯𐑡𐑶𐑦𐑙 𐑞 ·𐑗𐑪𐑒 𐑮𐑧𐑛 𐑕𐑢𐑦𐑗𐑩𐑕 𐑞𐑨𐑑 𐑖𐑦𐑐𐑑 𐑢𐑦𐑞 𐑥𐑲 [#zsa-voyager-has-arrived][·𐑟𐑕𐑱 𐑝𐑶𐑩𐑡𐑼 𐑒𐑰𐑚𐑹𐑛]. 𐑲 𐑢𐑪𐑟 𐑣𐑬𐑢𐑧𐑝𐑼 𐑒𐑿𐑮𐑾𐑕 𐑣𐑬 𐑩 𐑤𐑲𐑑𐑼 𐑢𐑱𐑑 𐑕𐑢𐑦𐑗 𐑥𐑲𐑑 𐑓𐑰𐑤. 𐑲 𐑢𐑪𐑟 𐑒𐑪𐑯𐑕𐑦𐑛𐑼𐑦𐑙 𐑹𐑛𐑼𐑦𐑙 𐑕𐑳𐑥 ·𐑐𐑮𐑴 𐑮𐑧𐑛 35𐑜 𐑤𐑦𐑯𐑽 𐑕𐑢𐑦𐑗𐑩𐑟, 𐑚𐑳𐑑 𐑞𐑧𐑯 𐑲 𐑣𐑻𐑛 𐑩𐑚𐑬𐑑 𐑞 [[https://keebd.com/products/ambients-silent-linear-twilight-choc-switches][·𐑒𐑱𐑤 𐑨𐑥𐑚𐑾𐑯𐑑𐑕]]
𐑤𐑲𐑯 𐑝 𐑕𐑲𐑤𐑩𐑯𐑑 𐑤𐑦𐑯𐑽 𐑕𐑢𐑦𐑗𐑩𐑟 𐑯 𐑛𐑩𐑕𐑲𐑛𐑩𐑛 𐑑 𐑜𐑦𐑝 𐑞 ·𐑑𐑢𐑲𐑤𐑲𐑑 35𐑜 𐑕𐑢𐑦𐑗𐑩𐑟 𐑩 𐑑𐑮𐑲. 𐑪𐑯 𐑹𐑛𐑼𐑦𐑙 𐑞𐑧𐑥 𐑓𐑮𐑪𐑥 𐑩 𐑤𐑴𐑒𐑩𐑤 𐑝𐑧𐑯𐑛𐑼, 𐑞𐑱 𐑼𐑲𐑝𐑛 𐑩 𐑓𐑿 𐑛𐑱𐑟 𐑤𐑱𐑑𐑼, 𐑯 𐑪𐑯 𐑥𐑲 ·𐑝𐑶𐑩𐑡𐑼 𐑒𐑰𐑚𐑹𐑛 𐑲 𐑕𐑢𐑪𐑐𐑑 𐑬𐑑 𐑞 ·𐑗𐑪𐑒 𐑮𐑧𐑛𐑟 𐑓 𐑞 𐑨𐑥𐑚𐑾𐑯𐑑 𐑑𐑢𐑲𐑤𐑲𐑑𐑕.

#+attr_html: alt="Left half of a ZSA Voyager split keyboard with one keycap at the top left removed to expose a light green coloured Ambients Twilight silent linear low profile switch."

[[file:20240914-IMG_0445-1536x1503.jpg]]
𐑞𐑱 𐑛𐑵 𐑣𐑨𐑝 𐑩 𐑤𐑳𐑝𐑤𐑦 𐑓𐑰𐑤 𐑢𐑦𐑞 𐑞 𐑕𐑪𐑓𐑑 𐑒𐑫𐑖𐑩𐑯𐑦𐑙/𐑛𐑨𐑥𐑐𐑦𐑙 𐑨𐑑 𐑞 𐑧𐑯𐑛 𐑝 𐑞 𐑕𐑢𐑦𐑗𐑩𐑕 𐑑𐑮𐑨𐑝𐑩𐑤, 𐑷𐑤𐑞𐑴 𐑢𐑧𐑯 𐑑𐑲𐑐𐑦𐑙 𐑢𐑦𐑞 𐑞𐑧𐑥 𐑲 𐑓𐑧𐑤𐑑 𐑥𐑲 𐑧𐑮𐑼 𐑮𐑱𐑑 𐑒𐑮𐑰𐑐𐑦𐑙 𐑳𐑐. 𐑲 𐑓𐑬𐑯𐑛 𐑞𐑨𐑑 𐑢𐑦𐑞 𐑞 𐑕𐑪𐑓𐑑 𐑓𐑰𐑤 𐑝 𐑞 𐑕𐑢𐑦𐑗𐑩𐑕, 𐑲 𐑢𐑪𐑟 𐑐𐑮𐑧𐑕𐑦𐑙 𐑞𐑧𐑥 𐑩 𐑚𐑦𐑑 𐑥𐑹 𐑕𐑤𐑴𐑤𐑦 𐑯 𐑣e𐑟𐑦𐑑𐑩𐑯𐑑𐑤𐑦, 𐑢𐑦𐑗 𐑢𐑪𐑟 𐑒𐑷𐑟𐑦𐑙 𐑓𐑷𐑤𐑕 𐑨𐑒𐑑𐑦𐑝𐑱𐑖𐑩𐑯𐑟 𐑪𐑯 𐑥𐑲 𐑤𐑱𐑼-𐑑𐑨𐑐 𐑯 𐑥𐑪𐑛-𐑑𐑨𐑐 𐑒𐑰𐑟. 𐑕𐑴, 𐑲 𐑯𐑰𐑛 𐑑 𐑚𐑰 𐑩 𐑚𐑦𐑑 𐑥𐑹 𐑛𐑦𐑤𐑦𐑡𐑩𐑯𐑑 𐑩𐑚𐑬𐑑 "𐑑𐑨𐑐𐑦𐑙" 𐑮𐑭𐑞𐑼 𐑞𐑨𐑯 𐑐𐑮𐑧𐑕𐑦𐑙" 𐑞 𐑒𐑰𐑟. 𐑲 𐑭𐑤𐑕𐑴 𐑣𐑨𐑝 𐑯𐑪𐑑 𐑣𐑨𐑛 𐑩 𐑤𐑪𐑑 𐑝 𐑑𐑲𐑥 𐑓 𐑓𐑴𐑒𐑩𐑕𐑑 𐑑𐑲𐑐𐑦𐑙 𐑐𐑮𐑨𐑒𐑑𐑦𐑕 𐑤𐑱𐑑𐑤𐑦 𐑛𐑿 𐑑 𐑩 𐑕𐑤𐑲𐑑𐑤𐑦 𐑣𐑧𐑒𐑑𐑦𐑒 𐑖𐑧𐑡𐑵𐑤 𐑨𐑑 𐑢𐑻𐑒 𐑞𐑦𐑕 𐑑𐑲𐑥 𐑝 𐑘𐑽, 𐑯 𐑲𐑝 𐑕𐑰𐑯 𐑥𐑲 𐑑𐑲𐑐𐑦𐑙 𐑕𐑐𐑰𐑛 𐑛𐑮𐑪𐑐 𐑪𐑓 𐑩 𐑚𐑦𐑑. 𐑲𐑥 𐑖𐑫𐑼 𐑦𐑑 𐑢𐑴𐑯𐑑 𐑑𐑱𐑒 𐑤𐑪𐑙 𐑑 𐑜𐑧𐑑 𐑚𐑨𐑒 𐑑 𐑥𐑲 𐑐𐑮𐑰𐑝𐑾𐑕 𐑕𐑐𐑰𐑛.

𐑲 𐑛𐑩𐑕𐑲𐑛𐑩𐑛 𐑑 𐑐𐑪𐑐𐑘𐑩𐑤𐑱𐑑 𐑥𐑲 ·𐑒𐑹𐑯 $6 \times 3$ 𐑒𐑰𐑚𐑹𐑛 𐑢𐑦𐑞 𐑞 ·𐑗𐑪𐑒 𐑮𐑧𐑛𐑟 𐑲 𐑮𐑰𐑥𐑵𐑝𐑛 𐑓𐑮𐑪𐑥 𐑥𐑲 ·𐑝𐑶𐑩𐑡𐑼. 𐑲 𐑮𐑰𐑥𐑵𐑝𐑛 𐑞 ·𐑗𐑪𐑒 𐑚𐑮𐑬𐑯𐑟, 𐑦𐑯𐑕𐑻𐑑𐑩𐑛 𐑞 ·𐑗𐑪𐑒 𐑮𐑧𐑛𐑟 𐑯 𐑮𐑩𐑐𐑤𐑱𐑕𐑑 𐑞 𐑒𐑰𐑒𐑨𐑐𐑕.

#+attr_html: alt="Left half of a Corne 6x3 ergoomic split keyboard with one keycap at the top left removed to expose a Choc Red low profile linear keyswitch."
[[file:20240914-IMG_0443-1536x1093.jpg]]

𐑦𐑯 𐑞 ·𐑒𐑹𐑯 𐑞 ·𐑗𐑪𐑒 𐑮𐑧𐑛𐑟 𐑛𐑴𐑯𐑑 𐑓𐑰𐑤 𐑒𐑢𐑲𐑑 𐑨𐑟 𐑯𐑲𐑕 𐑨𐑟 𐑢𐑧𐑯 𐑞𐑱 𐑢𐑻 𐑦𐑯 𐑞 ·𐑝𐑶𐑩𐑡𐑼 -- 𐑲 𐑐𐑫𐑑 𐑛𐑬𐑯 𐑑 𐑞 𐑥𐑹 𐑕𐑪𐑤𐑦𐑛 𐑒𐑪𐑯𐑕𐑑𐑮𐑳𐑒𐑖𐑩𐑯 𐑝 𐑞 ·𐑝𐑶𐑩𐑡𐑼. 𐑣𐑬𐑧𐑝𐑼, 𐑞 ·𐑗𐑪𐑒 𐑮𐑧𐑛𐑟 𐑦𐑯 𐑞 ·𐑒𐑹𐑯 𐑓𐑰𐑤 𐑥𐑳𐑗 𐑚𐑧𐑑𐑼 𐑞𐑨𐑯 𐑞 ·𐑗𐑪𐑒 𐑚𐑮𐑬𐑯𐑟 𐑞𐑱 𐑮𐑰𐑐𐑤𐑱𐑕𐑑, 𐑢𐑦𐑞 𐑤𐑧𐑕 𐑧𐑓𐑹𐑑 𐑮𐑰𐑒𐑢𐑲𐑼𐑛 (50𐑜 𐑝𐑻𐑕𐑩𐑟 60𐑜, 𐑯 𐑯𐑴 𐑕𐑒𐑮𐑨𐑗𐑦 "𐑑𐑨𐑒𐑑𐑲𐑤 𐑚𐑳𐑥𐑐" 𐑕𐑳𐑗 𐑨𐑟 𐑦𐑑 𐑦𐑟 𐑦𐑯 𐑞 𐑤𐑴 𐑐𐑮𐑴𐑓𐑲𐑤 ·𐑗𐑪𐑒 𐑕𐑢𐑦𐑗𐑩𐑟).

𐑦𐑯 𐑥𐑲 ·𐑒𐑹𐑯 $5 \times 3$ 𐑒𐑰𐑚𐑹𐑛, 𐑲 𐑕𐑑𐑦𐑤 𐑣𐑨𐑝 𐑞 ·𐑗𐑪𐑒 𐑚𐑮𐑬𐑯 𐑕𐑢𐑦𐑗𐑩𐑟 𐑞𐑨𐑑 𐑞 𐑒𐑰𐑚𐑹𐑛 𐑖𐑦𐑐𐑑 𐑢𐑦𐑞.

#+attr_html: alt="Left half of Corne 5x3 mini ergoomic split keyboard with one keycap at the top left removed to expose a Choc Brown low profile tactile keyswitch."
[[file:20240914-IMG_0446-1536x1261.jpg]]

𐑲 𐑔𐑦𐑙𐑒 𐑲𐑤 𐑩𐑝𐑧𐑯𐑗𐑩𐑤𐑦 𐑕𐑢𐑪𐑐 𐑞𐑧𐑥 𐑬𐑑 𐑓 𐑕𐑳𐑥 𐑕𐑐𐑺 ·𐑗𐑪𐑒 𐑮𐑧𐑛 𐑕𐑢𐑦𐑗𐑩𐑟 𐑞𐑨𐑑 𐑲 𐑹𐑛𐑼𐑛, 𐑚𐑳𐑑 𐑓 𐑯𐑬 𐑲𐑤 𐑤𐑰𐑝 𐑞 ·𐑗𐑪𐑒 𐑚𐑮𐑬𐑯𐑟 𐑦𐑯 𐑐𐑤𐑱𐑕 𐑕𐑴 𐑲 𐑣𐑨𐑝 𐑩 𐑚𐑱𐑕𐑤𐑲𐑯 𐑐𐑶𐑯𐑑 𐑝 𐑒𐑩𐑥𐑐𐑨𐑮𐑦𐑕𐑩𐑯.

** ZSA Voyager has arrived!
*** DONE ZSA Voyager has arrived! :Computers:Keyboards:AltKeyboardLayouts:ISRT:Miryoku:MechKeyboard:SplitKeyboard:
:PROPERTIES:
:CUSTOM_ID: zsa-voyager-has-arrived
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20240831_zsa-voyager-has-arrived
:EXPORT_DATE: 2024-08-31
:EXPORT_DESCRIPTION: 20240831-voyager-1536x1033.jpg
:END:

After experiencing some reliability issues between my Corne keyboards and my Macbook (but no issues using them with my Linux workstation), I decided to invest in a [[https://www.zsa.io/voyager][Voyager keyboard from ZSA]].

There were a couple of decisions to be made when placing the order.

Firstly the color. I opted for black instead of white, as I thought the white keys could start to look a little grubby after some extended use.

The next decision was a bit harder. What type of switches should I get? My Corne keyboards both have Choc Brown tactile switches, and I could easily put them in the Voyager if I wanted to try them out. So, I decided to order something different. The noisy clicks of the Choc White switches didn’t sound too appealing, so I was tossing up between the Choc Reds and the Choc Red Pros. In the end I went with the slightly heavier Choc Reds, as I was worried that the lighter Choc Red Pros could be a bit frustrating to type on with false activations, especially when trying to learn the ISRT keyboard layout.

The final decision was which keycaps to choose. The US-locale keycaps looked very busy, and my intention was to use layers for numbers and symbols, so I ruled out those keycaps fairly quickly. This meant it was down to the international keycaps versus the blank keycaps.

The benefit of the international keycaps is that if your hands are not in a proper touch-typing position, then you can look at the keys to type something without the mental strain of trying to recall the key positions from conscious memory. However, the legends are still quite visually noisy, and to discourage “cheating” while learning to touch-type on ISRT, I eventually settled on the minimalistic cool-looking blank keycaps. This was probably the hardest of the decisions, as while switches can easily be swapped out, extra Voyager keycaps cannot be ordered separately should you change your mind.

Within less than a week of ordering the Voyager, I had it in my hands. It is very nicely packaged, with extra switches and keycaps and a tool to help you change them out.

[[file:20240831-voyager_box-edited.jpg]]

I replaced the “t” and “n” blank home keys with keycaps that have a “bump” to help you find the homerow quickly by feel. I also replaced the small inner thumb keys with “Space” and “Cmd” keycaps and left all the remaining keycaps blank.

I couldn’t use the keyboard straight away though, as I wasn’t familiar with the default layout, and the blank keycaps didn’t provide any clues. The next step was therefore to implement in the Voyager the familiar ISRT layout I have been using with my Corne keyboards. The Oryx online configuration tool made this very easy. It was a little more fiddly than the Vial GUI I was using with the Cornes, but is ultimately more powerful than Vial, implements version control, and allows keymaps to be easily shared without needing to spend a lot of time documenting the layout.

[[file:20240831-isrt-layout.png]]

There is a link to my Oryx layout [[https://configure.zsa.io/voyager/layouts/jYDdw/VA4le/0][here]], and I talk a bit about this layout in previous posts on [[#isrt-keyboard-layout][ISRT]] and [[#home-row-layer-keys][Home Row Layers]]. I have tried to align the Voyager and Corne layouts, making use of the outer pinky column where it is available while still making it usable on the Corne mini 5×3 configuration.

So, now that the keyboard was usable, what was it like to type on?

I have to say, I am loving these Choc Red switches! They are so buttery-smooth compared to the Choc Browns, I think I am going to order some for one of my Corne keyboards. I’m also considering whether I should also order some lighter gauge switches to compare.

In the meantime, I will keep working on building typing speed on my ISRT layout. It is slow progress, but I am getting more and more comfortable with it as I use it for my daily work.

** Home Row Layer Keys
*** DONE Home Row Layer Keys :Computers:Keyboards:AltKeyboardLayouts:MechKeyboard:SplitKeyboard:ISRT:Miryoku:Vial:
:PROPERTIES:
:CUSTOM_ID: home-row-layer-keys
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20240811_home-row-layer-keys
:EXPORT_DATE: 2024-08-11
:EXPORT_DESCRIPTION: 20240811-IMG_0418sm-1536x733.jpg
:END:

I’ve been practising the [[https://github.com/DreymaR/BigBagKbdTrixPKL/blob/master/Layouts/ISRT/README.md][ISRT]] layout on https://keybr.com/ and am slowly getting used to it. The Miryoku system of layers is quite easy to work with, but I’ve noticed a couple of issues:

  1. Sometimes I am tripping over the tap-dance and modiier kuys in the base layer.
  2. When I was typing lots of numbers fos work, I noticed some discomfort in my wrist fsom holding down the number layer thumb key.

I found some ergonomic mouse pads to provide some better wrist support. However, another video I recently saw on [[https://youtu.be/dg2TT1OJlQs?si=5aLRD6NpQS2v1CJ2][Ben Vallack’s ZSA Voyager keyboard]] led me to rethink the use of layer keys on the thumbs.

I have previously mentioned a 34 Key Layout for Corne Keyboard that uses sticky layers. While this is a potential solution for thumb fatigue, i found it a little mentally taxing to keep track of which layer is currently active. Ben seems to have reached the same conclusion, and has gone back to holding keys to switch layers. Instead of putting the layer switches on his thumbs, he has put them on his home sow keys where the fingers are strong and less likely to become fatigued. I thought I’d give this a try.

I opted for a blend between the 34-key sticky layer and Miryoku layous.

   - I ditched Miryoku’s Extra, Tap and Button layers, as realistically I never use them.
   - The NUM layer was kept with the numpad arrangement on the left hand. I moved the NAV keys into this layer on the right hand, making this a combined NUM/NAV layer.
   - Like in Miryoku, the SYM layer is the “NUM layer with SHIFT” on the left hand. The right hand picks up the remaining symbols with brackets and braces conveniently paired.
   - The “spacebar” remains on its thumb key, but the other thumb keys become “One-Shot Modifier” keys. Enter, Tab, Backspace, etc. were moved to the NUM/NAV and SYM layers like on the 34 key layout. Modifiers (except for SHIFT) are available above the home row.
   - Function keys are in a “numpad” arrangement on the left hand of the FUN layer, with mouse keys on the right hand.
   - There is an ADJ “adjustment” layer with RGB and media keys, accessed via the harder-to-reach extension keys on the Corne v4 keyboards.
   - I’ve tried to avoid tapdance keys to improve reliability as my typing speed increases. Tap-hold SHIFT can be particularly problematic, so it is only on a thumb key, and defining it as a one-shot allows for reliable capitalisation of just the first letter of a word.

These considerations have led to the following layout:

**** BASE (Layer 0)
#+begin_example
|-----+------+------+------+------+------+------+---+------+------+------+------+------+------+-----|
|     |      | LCtl | LAlt | LCmd |      | ▒▒▒▒ | ▒ | ▒▒▒▒ |      | RCmd | RAlt | RCtl |      |     |
| CAP | Y    | C    | L    | M    | K    | ▒▒▒▒ | ▒ | ▒▒▒▒ | Z    | F    | U    | <,   | "'   | :;  |
|-----+------+------+------+------+------+------+---+------+------+------+------+------+------+-----|
|     |      | FUN> | NUM> | SYM> |      | ADJ> | ▒ | ADJ> |      | SYM> | NUM> | FUN> |      |     |
| Tab | I    | S    | R    | T    | G    |      | ▒ |      | M    | N    | E    | A    | O    | =   |
|-----+------+------+------+------+------+------+---+------+------+------+------+------+------+-----|
|     |      |      |      |      |      |      | ▒ |      |      |      |      |      |      |     |
| ?   | Q    | V    | W    | D    | J    |      | ▒ |      | K    | H    | ?/   | >.   | X    | !   |
|-----+------+------+------+------+------+------+---+------+------+------+------+------+------+-----|
| ▒▒▒ | ▒▒▒▒ | ▒▒▒▒ | LAlt | Spce | LSft | ▒▒▒▒ | ▒ | ▒▒▒▒ | RCtl | RCmd | RAlt | ▒▒▒▒ | ▒▒▒▒ | ▒▒▒ |
|-----+------+------+------+------+------+------+---+------+------+------+------+------+------+-----|
#+end_example

**** NUM (Layer 1)

#+begin_example
|-----+------+------+------+------+------+------+---+------+------+------+------+------+------+-----|
| RST | Esc  |    7 |    8 |    9 | +    | ▒▒▒▒ | ▒ | ▒▒▒▒ | PgUp | Home | Up   | End  | Bksp |     |
|-----+------+------+------+------+------+------+---+------+------+------+------+------+------+-----|
|     | Tab  |    4 |    5 |    6 | -    |      | ▒ |      | PgDn | Left | Down | Rght | Ent  |     |
|-----+------+------+------+------+------+------+---+------+------+------+------+------+------+-----|
|     | 0    |    1 |    2 |    3 | .    |      | ▒ |      | M2   | M1   | MWDn | MWUp | Del  |     |
|-----+------+------+------+------+------+------+---+------+------+------+------+------+------+-----|
| ▒▒▒ | ▒▒▒▒ | ▒▒▒▒ | LAlt | Spce | LSft | ▒▒▒▒ | ▒ | ▒▒▒▒ | RCtl | RCmd | RAlt | ▒▒▒▒ | ▒▒▒▒ | ▒▒▒ |
|-----+------+------+------+------+------+------+---+------+------+------+------+------+------+-----|
#+end_example

**** SYM (Layer 2)

#+begin_example
|-----+------+------+------+------+------+------+---+------+------+------+------+------+------+-----|
|     | Esc  | &    | *    | /    | :    | ▒▒▒▒ | ▒ | ▒▒▒▒ | ,    | {    | }    | `    | Bksp |     |
|-----+------+------+------+------+------+------+---+------+------+------+------+------+------+-----|
|     | Tab  | $    | %    | ^    | _    |      | ▒ |      | \    | (    | )    | =    | Ent  |     |
|-----+------+------+------+------+------+------+---+------+------+------+------+------+------+-----|
|     | CpLk | !    | @    | #    | ;    |      | ▒ |      | ¦    | [    | ]    | ~    | Del  |     |
|-----+------+------+------+------+------+------+---+------+------+------+------+------+------+-----|
| ▒▒▒ | ▒▒▒▒ | ▒▒▒▒ | LAlt | Spce | LSft | ▒▒▒▒ | ▒ | ▒▒▒▒ | RCtl | RCmd | RAlt | ▒▒▒▒ | ▒▒▒▒ | ▒▒▒ |
|-----+------+------+------+------+------+------+---+------+------+------+------+------+------+-----|
#+end_example

**** FUN (Layer 3)

#+begin_example
|-----+------+------+------+------+------+------+---+------+------+------+------+------+------+-----|
|     | PrSc | F7   | F8   | F9   | F12  | ▒▒▒▒ | ▒ | ▒▒▒▒ | MWUp | MWLt | M_Up | MWRt | Agn  |     |
|-----+------+------+------+------+------+------+---+------+------+------+------+------+------+-----|
|     | Ins  | F4   | F5   | F6   | F11  |      | ▒ |      | MWDn | M_Lt | M_Dn | M_Rt | Undo |     |
|-----+------+------+------+------+------+------+---+------+------+------+------+------+------+-----|
|     | ScLk | F1   | F2   | F3   | F10  |      | ▒ |      | M2   | M1   | Copy | Pste | Cut  |     |
|-----+------+------+------+------+------+------+---+------+------+------+------+------+------+-----|
| ▒▒▒ | ▒▒▒▒ | ▒▒▒▒ | LAlt | Spce | LSft | ▒▒▒▒ | ▒ | ▒▒▒▒ | RCtl | RCmd | RAlt | ▒▒▒▒ | ▒▒▒▒ | ▒▒▒ |
|-----+------+------+------+------+------+------+---+------+------+------+------+------+------+-----|
#+end_example

**** ADJ (Layer 4)

#+begin_example
|-----+------+------+------+------+------+------+---+------+------+------+------+------+------+-----|
|     |      |      |      |      |      | ▒▒▒▒ | ▒ | ▒▒▒▒ | RGBT | Mode | H+   | S+   | V+   |     |
|-----+------+------+------+------+------+------+---+------+------+------+------+------+------+-----|
|     |      |      |      |      |      |      | ▒ |      | Prev | Vol- | Vol+ | Next | E+   |     |
|-----+------+------+------+------+------+------+---+------+------+------+------+------+------+-----|
|     |      |      |      |      |      | RST  | ▒ | RST  |      | Mute | Play | Stop |      |     |
|-----+------+------+------+------+------+------+---+------+------+------+------+------+------+-----|
| ▒▒▒ | ▒▒▒▒ | ▒▒▒▒ | LAlt | Spce | LSft | ▒▒▒▒ | ▒ | ▒▒▒▒ | RCtl | RCmd | RAlt | ▒▒▒▒ | ▒▒▒▒ | ▒▒▒ |
|-----+------+------+------+------+------+------+---+------+------+------+------+------+------+-----|
#+end_example

The layout works for both 6×3 standard and 5×3 mini keyboards. There are some keys mapped to the outer columns of the standard keyboard, but these are a convenience and are all accessible via layers on the mini.

As usual, the Vial layout is on my [[https://github.com/matt-maguire/kbd_firmware/tree/custom/keyboards/crkbd/vial-kb][github repo]].

** ISRT Keyboard Layout
*** DONE ISRT Keyboard Layout :Computers:Keyboards:Corne:AltKeyboardLayouts:MechKeyboard:SplitKeyboard:Colemak:ISRT:Vial:
:PROPERTIES:
:CUSTOM_ID: isrt-keyboard-layout
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20240803_isrt-keyboard-layout
:EXPORT_DATE: 2024-08-03
:EXPORT_DESCRIPTION: 20240803-isrt-anglemod.en_.ansi_-1024x312.jpg
:END:

I have been training on the Colemak-DH layout with my Corne keyboards, and I am getting used to it, even though my typing speed is still slow. I found another [[https://youtu.be/dg2TT1OJlQs?si=ZiAzPIMkbCAMG02X][video from Ben Vallack]] about the [[https://www.zsa.io/voyager][ZSA Voyager]] keyboard, and looked into his layout on that keyboard. He seems to have dropped the idea of layer toggles due to the increased cognitive load of keeping track of which layer you are in. Instead, he now holds his home row keys to select layers. I might look into this approach at some point, but for now I am quite happy with the Miryoku setup.

I did notice that he is still using the ISRT layout even after so many iterations of his setup. Some of the Colemak-DH sequences involving my ring and pinkie fingers are not feeling so great, so I thought I’d look a bit into this ISRT setup before Colemak-DH becomes too ingrained.

**** ISRT Layout

The original creator of the ISRT layout is no longer promoting it, and has taken down his web page. However, thanks to the magic of Wayback Machine, a copy has been archived [[https://web.archive.org/web/20230203194545/https://notgate.github.io/layout/][here]].

The layout that he finally settled on is as follows:

[[file:20240803-Zilfkpz.png]]

This is for an ortholinear (matrix) keyboard (like my Cornes). He also proposed some mappings onto an ANSI keyboard, with and without angle mods:

#+begin_example
Ortholinear (Matrix) Keyboards:
y c l m k    z f u , '
i s r t g    p n e a o ;
q v w d j    b h / . x
#+end_example

#+begin_example
ANSI Keyboard (no angle mod):
y c l m k z f u , '
 i s r t g p n e a o ;
  q v w d j b h / . x
#+end_example

#+begin_example
ANSI Keyboard (angle mod):
y c l m k z f u , '
 i s r t g p n e a o ;
  v w d j q b h / . x
#+end_example

The angle mod version makes it more comfortable on a staggered keyboard, but due to the limitations of the ANSI keys the “Q” is moved from the far left to the middle of the bottom row of the keyboard. I also experimented by defining a “wide” mapping:

#+begin_example
ANSI Keyboard (wide angle mod):
` 1 2 3 4 5 6 \ 7 8 9 0 =  ⌫
↹  y c l m k [ z f u , ' - ;
⇧⇧  i s r t g ] p n e a o  ⏎
⇧⇧⇧  v w d j q x b h / . ⇧⇧⇧
#+end_example

I set up the wide and regular angle mod layouts in Karabiner on my Mac. In the end, I didn’t like the wide angle mod, as you have to move both the X as well as the Q to the centre of the bottom row. If I use ISRT on my Macbook’s keyboard, I’ll just use the regular angle mod version. I imagine though that mostly I’ll be using the Corne keyboard instead.

**** Pros and Cons of the Layout

So, are there any benefits to the ISRT layout compared to Colemak-DH? A bit of a search on the Internet turned up an interesting [[https://bit.ly/layout-doc-v2][Keyboard Layouts]] document (that one is second edition; the [[https://docs.google.com/document/d/1_a5Nzbkwyk1o0bvTctZrtgsee9jSP-6I0q3A0_9Mzm0/edit?usp=sharing][first edition]] is more graphics-heavy). Some other information I found was from a Reddit post and some analysis on https://keyboard-design.com.

To summarise, the key points about ISRT are:

    the IY column is moved to the consonant (left) hand, and A is moved to where I was. Consequently, rolls increase while redirects decrease (the *YOU* and *ION* trigrams are not redirects anymore).

    The drawback is that Y is now on top row pinky, which makes it harder to reach. There is also potential that the alternation of hands that you normally get from putting vowels and consonants on separate hands becomes worse (if you consider that Y is a semi-vowel)

    Punctuation no longer causes SFBs (where the same finger used to type two letters in succession), as the right ring finger has “,A.”. (ie. this avoid the SFBs on Colemak where words ending in “Y” are followed by a fullstop and words ending in “E” are followed by a comma).

    Movement on the right index is drastically reduced, thanks to using FNHPB over HNLM.

    Different ring + middle setup: ring finger is *CSV* and middle finger is *LRW*. Although *LRW* is a high movement column, it allows us to get the letter L off the ring finger.

So, what was it actually like to type on?

**** Trying it out

Because I wasn’t sure if I would want to commit to a layout that has effectively been abondoned by its creator, I decided to write the keymap to the right hand side fontrollers of my Corne keyboards. This means that if I plug the left half of the keyboard to my computer’s USB port, I get Colemak-DH, and if I connect the right half to the computer I get ISRT. Because I am using 10 layer Miryoku setup with both layouts, I needed to reflash the Vial firmware on the right hand controller so it could support all 10 layers. I then took my [[https://github.com/matt-maguire/kbd_firmware/tree/custom/keyboards/crkbd/vial-kb][Vial layout file]] for my Colemak-DH setup, copied it to the right hand controller, and used the Vial GUI to remap the letters. I created Vial layouts for both my full size and mini Corne v4 keyboards.

I found it a bit confusing that the A and I keys were swapped, as were the R and S keys. Even with the limited time I have been using Colemak-DH, those letters had already started to find their way into my muscle memory, and as a result my typing speed dropped somewhat.

I have to say though, I do like the feel of this ISRT layout better than Colemak-DH. I don’t feel so much tension in my ring and little finger typing the ION and YOU trigrams. I think this is the layout I am going to move forward with.

**** Getting up to speed on ISRT

So, how can I get better at typing on the ISRT layout?

I am currently using two websites to help with this:

- https://keybr.com: this website doesn’t support the ISRT layout. However, since ISRT can be considered to be an optimisation of the Colemak layout, I have left the keyboard layout sent to Colemak-DH. My graphs have all taken a dive, but after one day they are no longer falling, and are slowly starting to climb again. The keyboard layout on the screen shows the “next key” in the wrong place, which can be confusing, and the heatmap is also showing keys in the wrong place, but it still tracks my accuracy wit hthe different keys, and the order of unlocking keys still makes sense even for an ISRT layout.

- https://monkeytype.com: this website DOES support ISRT! I was quite surprised. It is possible to set up a custom wordset, where one of the english language corpuses is filtered to include only letters from the ISRT home row. As my typing improves, I can gradually move letters from the excluded list to the list of allowed letters, and then the site behaves in a similar way to keybr.com (albeit without the per-letter statistics and adaptive letter focus).

** Corne V4.1 Mini
*** DONE Corne V4.1 Mini :Keyboards:Corne:Miryoku:Colemak:MechKeyboard:SplitKeyboard:AltKeyboardLayouts:Vial:
:PROPERTIES:
:CUSTOM_ID: corne-v4-mini
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20240721_corne-v4-mini
:EXPORT_DATE: 2024-07-21
:EXPORT_DESCRIPTION: 20240721-corne_v4_mini-1024x365.jpg
:END:

I’ve had so much fun with my Corne V4 keyboard, I decided to take advantage of the sale the vendor had going, and order a second one! My idea was to keep the 46-key Corne at home connected to my Linux workstation, and acquire a 40-key Corne V4 mini to carry around with my laptop. I ordered the same choc brown switches as before, but instead of black keycaps I ordered white keycaps. This would allow me to swap the different coloured keycaps in order to better highlight the home keys.

It’s a lovely compact setup. I was finding the outer columns of keys on the 46-key model to be distracting, and so I tried removing the outer columns of switches. I then ran into a problem where Vial requires you to hold down two switches on the top far left to un.ock the keyboard — oops, I had removed the top left-most switch! Fortunately the firmware allows you to configure which keys to use for unlocking at build time, so I moved the security key setting inwards to avoid the far outer column.

I reflashed the left hand side of the mini with no problem to open up 10 layers in Vial. When I tried to flash the right hand side though, I had a problem — one of the keys needed to unlock the keyboard doesn’t exist on the mini — it was on the outer column that gets broken away from the PCB when building the mini. How to get the right hand half into bootloader mode if one of the unlock keys doesn’t exist?

I pulled the keyboard apart with my newly acquired Torx screwdriver set, and found some switches on the PCB that could be used to get the board into bootloader mode. A double-tap on the reset switch did the trick. I reflashed the right-hand half after tweaking the build to map the unlock keys onto keys that actually exist. This went through ok, so I put the keyboard back together and used Vial’s matrix tester to verify that all keys were working.

What I found was that only the half that was connected to the USB cable would register any key presses. The other half would not show any RGB lights nor register any key presses. Oh dear, what to do?

When I built the firmware, I assumed that it would be rev 4.0 like with the previous keyboard I had purchased from this vendor. However, I hadn’t checked to confirm this. Once again, I disassembled the board, and discovered that the mini was made from rev 4.1 boards! I built some rev 4.1 firmware and reflashed both halves, and the keyboard came back to life with full communication between the two halves. Phew, what a relief!

It has been lots of fun playing with these keyboards, and I have learned a lot. The Vial layouts I set up on the 46-key Corne can be loaded directly onto the 40-key mini, and it maps the correct keycodes onto the appropriate keys (and the two outer columns from the 46-key keyboard are silently dropped).

I have loaded the full miryoku layout into the left-hand side of both keyboards, and the Ben Vallack “sticky layer” adapted layout in the right hand side of the keyboards. By connecting either the left-hand side or the right-hand side to the computer, I can choose which layout I want to use. At the moment, I think I am finding the miryoku layout a bit easier to navigate. The other layout requires a bit more awareness of which layer you are in, and because I am still battling to learn the Colemak layout on both setups, this just adds to the cognitive load. I think I’ll stick with the miryoku layout for now until I get more comfortable, and then I’ll revisit the other layout once I have more experience.

You can find the firmware tweaks and keyboard layouts I am using in my [[https://github.com/matt-maguire/kbd_firmware/tree/custom/keyboards/crkbd/vial-kb][GitHub repository]] (“custom” branch has my changes; “main” branch tracks the vanilla upstream code).

** Corne V4 Update
*** DONE Corne V4 Update :Keyboards:Corne:AltKeyboardLayouts:MechKeyboard:SplitKeyboard:Colemak:Miryoku:
:PROPERTIES:
:CUSTOM_ID: corne-v4-update
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20240721_corne-v4-update
:EXPORT_DATE: 2024-07-20
:EXPORT_DESCRIPTION: 20240721-connector-1024x751.jpg
:END:

I’ve been continuing my journey into split mechanical keyboards. The 46-key Corne v4 Board that I recently bought seemed to have an unreliable USB connection on the left-hand side, with it losing power if the cable was lightly depressed. If the USB cable was connected to the right-hand side then it worked reliably. I decided to disassemble the left hand side and inspect the soldering on the USB connector to see if there could be a dry joint.

I immediately ran into an issue where the case was secured with torx screws rather than phillips heads. I took a trip to the local electronics store and bought a set of torx screw drivers. Once I had the keyboard disassembled, the cause of the connection issue was quite clear: a couple of the pins hadn’t been properly soldered!

After quickly touching up the dodgy joints, I had a reliable connection and reassembled the keyboard.

I was still keen to use a proper Miryoku layout implementation with this keyboard. The Vial firmware is actually very nice, allowing you to play with keymaps on the fly without constantly reflashing the keyboard, but the build supplied with the keyboard only supported 6 layers, whereas Miryoku requires 10 layers for a full implementation. I looked into how to rebuild the Vial firmware so it would support the required 10 layers. The Vial repo only seemed to support V1 of the Corne keyboard, based on the Pro Micro controller, whereas v4 seems to be based around a raspberry pi chip. This probably meant that I couldn’t use the Vial repo directly.

The keyboard vendor had provided a link to the github repo with the firmware for this keyboard. I forked the repository and followed the instructions to see if I could get it to build. Digging into the Makefile, I saw that the vanilla QMK and Vial repositories would be downloaded, and then some other files would be copied over to support the V4 keyboards. I found the place where the number of layers was hard-coded, increased it to 10, and tried to build.

Unfortunately, I saw that there were separate files for rev 4.0 and rev 4.1 boards. Which one did I have? After checking with some people on Discord, it seemed that I would have to disassemble the keyboard again so I could check what revision number was printed on the PCB. It turned out I had a rev 4.0 board, so I built the software and flashed it. Et voilà, I now had a firmware supporting 10 layers!

I went through the Miryoku source code to understand all the features used for the layout, and replicated them in my keyboard using the Vial GUI. You can find my tweaked firmware plus Miryoku layout file in [[https://github.com/matt-maguire/kbd_firmware/tree/custom/keyboards/crkbd/vial-kb][GitHub]]. I made a couple of tweaks to the layout to improve the user experience when typing foreign languages such as Esperanto and French.

#+attr_shortcode: :type note :title Note
#+begin_admonition
I've since learned that one important difference between rev 4.0 and 4.1 is that r4.0 uses a ''TRRS'' (tip-ring-ring-sleeve) full duplex interconnecting cable, whereas r4.1 uses a ''TRS'' half-duplex interconnecting cable. I believe this change was made due to a shortage of TRRS sockets on the market, and it explains why my 4.1 TRS board couldn't communicate properly when flashed with 4.0 TRRS firmware.
#+end_admonition

** 34 Key Layout for Corne Keyboard
*** DONE 34 Key Layout for Corne Keyboard :Computers:Keyboards:Corne:AltKeyboardLayouts:Colemak:MechKeyboard:SplitKeyboard:Vial:
:PROPERTIES:
:CUSTOM_ID: 34-key-layout-for-corne-keyboard
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20240715_34-key-layout-for-corne-keyboard
:EXPORT_DATE: 2024-07-15
:END:

I’ve been experimenting a bit more with the Corne keyboard. I saw a video from Ben Vallack where he lays out a mapping for his 34-key keyboard.

#+hugo: {{< youtube 8wZ8FRwOzhU >}}

In this video, he explains how holding down layer and modifier keys can cause fatigue, which he avoids by using “sticky” layer keys and “one-shot” modifiers. In the layout I am currently using, I use a similar layer scheme to Ben in which the shift key is moved to the left thumb. This is the layout I am currently working with:

[[file:20240715-keymap34.png]]

The corresponding Vial layout file can be found in [[https://github.com/matt-maguire/kbd_firmware/tree/custom/keyboards/crkbd/vial-kb][my GitHub]].

Ben’s original layout was optimised for his workflows on the Mac. While I also use a Mac, I am not so familiar with some of the shortcuts he uses. He is a Vim user, whereas these days I am spending more time in Emacs. He also seems to use Apples exclusively, while I am switching frequently between Mac and Linux. The biggest headache with all this switching is the handling of modifier keys such as Ctrl and Command keys. One potential solution for this is to remap modifier keys on my Linux box to make the two systems work in a more similar way. I found the [[https://github.com/rbreaves/kinto][following tool]] which may (or may not) help with this.

I’m going to play around with my usual workflows on Mac and Linux to see what shortcomings there are with this layout and what improvements I might make. Some tweaks I’ve already made are:

- re-introduced home key modifiers in the base layer. Because I am uncertain which modifiers I will be needing, I prefer to have too many rather than too few to start with. I’ve also put modifiers in a consistent way on the thumb keys — we’ll see if they get in the way of the layer toggle keys…
- I have added a couple of tap-dance shortcuts to the base layer to make it easier to type some languages requiring special characters such as é, à, ü, ß, ĉ, ŝ, ĵ, ŭ, etc..
- I rearranged the symbols in a similar way to a number pad to make it easier to remember. Different styles of brackets are paired on the left hand.
- I added function keys (eg. F1, F2, …) to the numeric keypad layer, as well as modifiers and some punctuation characters that I think may come in handy when entering numbers.
- I moved the audio/media player functions off the numeric layer onto a separate “adjustments” layer, together with some keys concerning RGB lighting.

#+attr_shortcode: :type note :title Note
#+begin_admonition
I put some backspace and delete shortcuts on the outer thumb keys for convenience; they are not actually needed, and the layout can be used just fine with only two thumb keys.
#+end_admonition

As I use the keyboard more, I’ll get a better idea what else I will need to add as well as what I can strip away. I’ll post more updates here as I learn more.

** Corne v4 Keyboard Keymap
*** DONE Corne v4 Keyboard Keymap :Computers:Keyboards:Corne:AltKeyboardLayouts:Colemak:Miryoku:MechKeyboard:SplitKeyboard:
:PROPERTIES:
:CUSTOM_ID: corne-v4
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20240711_corne-v4-keymap
:EXPORT_DATE: 2024-07-11
:EXPORT_DESCRIPTION: 20240711-corne_6x3.jpg
:END:
I recently acquired a pre-built Corne 46-key ergonomic split keyboard.

Rather than use the default QWERTY keyboard arrangement, I have programmed it to use a [[https://colemakmods.github.io/mod-dh/][COLEMAK-DH]] layout, which allows for much more efficient typing. Because there are a reduced number of keys, many of the keys need to be overloaded with multiple functions. This is normally done with two techniques:
- Tap-Modifiers: If you tap a key, it will output its normal character. However, if you hold the key, it can act as a modifier such as Shift, Ctrl, Alt, etc.. This means you don't need to dedicate separate keys for this, and these modifiers can be placed on the home row of the keyboard where you don't need to reach for them.
- Layers: just like how you hold the SHIFT key to get uppercase characters, you can define layers of your keyboard that can be accessed through "custom SHIFT" aka "layer" keys.

The layer scheme that I chose is based on a 36-key layout called "[[https://github.com/manna-harbour/miryoku][miryoku]]", which is a well thought-out design for minimalist keyboards. The layers are selected through the three keys at the bottom of each half by using your thumbs.
- The BASE layer is used to access normal letters and a few punctuation characters.
- The NAV layer gives you access to cursor movement, scrolling and mouse keys to let you move around efficiently.
- The MEDIA layer lets you access media controls such as play, pause, skip as well as volume controls and the RGB glow settings of the keyboard.
- The NUM layer gives you access to a numeric keypad, and the SYM layer gives you access to the various symbols you can access via a numeric keypad.
- The FUN layer gives you access to function keys such as F1, F2, ... up to F12

The firmware in this keyboard only supports 5 extra layers on top of the BASE layer, whereas the miryoku scheme called for a BASE layer plus 6 additional layers. I could have reflashed the device with a custom firmware to allow more layers. However, there would be a risk of running low on resources in the controller. Instead, because I have 10 extra keys on this keyboard (46 keys as opposed to miryoku's desired 36 keys), I decided to do away with miryoku's MOUSE layer and instead put those mouse-related keys into the NAV layer. This then allows me to add an extra SHIFT function to one of the thumb keys which may come in handy instead of juggling the home row SHIFT key modifiers.

The layers can be programmed with a user-friendly open-source app. The screenshots below show the various layers I initially set up on the keyboard:

**** BASE Layer (LT0):

[[file:20240711-LT0.png]]

**** NAV Layer (LT1):

[[file:20240711-LT1.png]]

**** MEDIA Layer (LT2):

[[file:20240711-LT2.png]]

**** NUM Layer (LT3):

[[file:20240711-LT3.png]]

**** SYM Layer (LT4):

[[file:20240711-LT4.png]]

**** FUN Layer (LT5):

[[file:20240711-LT5.png]]

**** Next Steps:

This is just an initial proposal, which may well change over time as a get more experience. Things I will be working on going forward:

- Learn the COLEMAK-DH keyboard layout. After using QWERTY keyboards for most of my life, the muscle memory needs to be retrained. I think it will be worth it though, as typing on QWERTY keyboards is very fatiguing, whereas with COLEMAK-DH, the hands hardly move, and (nearly) all the keys are only one key away from the home keys. I will train my fingers using the online tool https://www.keybr.com/, which starts training you on just the home keys, and then introduces additional keys as your typing improves. For more general practice and speed tests, there is of course https://monkeytype.com/ .
- Define a COLEMAK-DH keyboard layout on my macbook laptop, which is similar to the miryoku setup on the Corne physical keyboard. This means I can still practise using the layout and layers even if I don’t have the keyboard with me. There are 3 options here:
  - use a [[https://github.com/ColemakMods/mod-dh][COLEMAK-DH input method]] in macOS. This defines the layout of the letter keys, but doesn’t implement layers, ie. you need to move your hands away from the home keys to type numbers, access cursor keys, etc.. It is also not so easy to customise this.
  - use [[https://github.com/kmonad/kmonad][KMonad]] to implement a layered keymap. The author of the miryoku has provided [[https://github.com/manna-harbour/miryoku_kmonad][some tools]] to facilitate generating a suitable keymap. I can start KMonad manually in a terminal window to intercept keystrokes and remap them. It works and is cross-platform, but is a bit clunky, and tweaks require the toolchain to be modified and rerun to generate new keymap files each time.
  - use [[https://karabiner-elements.pqrs.org/][Karabiner-Elements]] to remap my Mac keyboard. This needs to be set up using some [[https://karabiner-elements.pqrs.org/docs/json/][JSON code]], but it integrates well with the Mac, and tweaks are relatively easy to do in real time.

- Build a smaller keyboard from parts so I can leave the Corne at home and carry a travel-friendly version. When using other PCs, it may not be convenient or even possible to play with keymaps, whereas a physical keyboard just needs to be plugged in and the PC will be none the wiser about your customised key mapping.

I’ll post updates here as I gain more experience and have something to report.
** Learn Japanese with Song Lyrics (Houki Boshi from Bleach)
*** DONE Learn Japanese with Song Lyrics (Houki Boshi from Bleach) :Music:Languages:Japanese:
:PROPERTIES:
:CUSTOM_ID: houki-boshi
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20220214_houki-boshi
:EXPORT_DATE: 2022-02-14
:END:

A great way to learn a language is through songs. They are usually repetitive, often (but not always) a bit slower than regular speech, and have a catchy tune. This helps to cement words and structures into the head.

I was watching an anime called [[https://en.wikipedia.org/wiki/Bleach_(TV_series)][Bleach]], and maybe a season into it they had a song at the end of each episode named [[https://www.youtube.com/watch?v=2xs_-nl6C3E][Houki Boshi]] (ほうき星) by the singer-songwriter [[https://en.wikipedia.org/wiki/Younha][Younha]]. She's actually Korean, but released an album [[https://en.wikipedia.org/wiki/Go!_Younha][Go! Younha]] in Japanese, and /Houki Boshi/ was one of the hit singles on that album.

There is a live performance of the song on YouTube, which has Japanese subtitles:

#+hugo: {{< youtube qaUvEOeFthE >}}

Subtitles are a great resource for language learners. One of the challenges with Japanese of course is the unfamiliar writing system. These subtitles contain kanji, the Chinese-style characters that Japanese often use in their writing. One problem with kanji is that it can be difficult to work out how a kanji character is pronounced -- and the pronounciation this is often context-dependent in Japanese. One way to deal with this is to write the pronunciation above the kanji using small hiragana characters -- the hiragana provides an unambiguous guide as to how the character is pronounced. We call these little hirigana pronunciation guides /furigana/, and they are often used in children's books to help the cildren learn the pronunciation of the kanji.

The video above doesn't have furigana, so in order to become more familiar with the kanji, I decided to write out the song lyrics and include the furigana. For this I used the $\LaTeX$ typesetting program with the [[https://ctan.org/pkg/leadsheets][leadsheets]] songbook package, and the /ruby/ package to add the furigana. Because I typed in the Japanese with unicode, I needed to use =xelatex= to build the PDF. I found [[https://www.animelyrics.com/anime/bleach/houkiboushi.jis.txt][here on the web]] an English translation to help remind myself what the various words mean. The final result is here:

#+hugo: {{< embed-pdf url="20220214-houki_boshi.pdf" >}}

As I typed up the lyrics, I looked up any words I wasn't familiar with, and studied the gramatical structures that were used (here the English translation was helpful as I could see how a particular nuance in English can be expressed in Japanese). You may notice that there is no romaji (writing Japanese with the Roman alphabet). When learning Japanese, it is recommended to learn the kana as quickly as possibly. When you write Japanese with Roman letters: it can obscure the way words change as you conjugate, it is very hard to read, and if you see real Japanese around it is almost never written in romaji. Therefore, it is best to ditch it as soon as possible.

You may notice that the live performance above leaves out the first two lines of the second verse -- I presume this was to shorten the performance for television. In the bleach anime, the song is even more abridged -- only the first and last line of the first verse is sung, followed by the final chorus.

Studying song lyrics is a great way to gain more exposure to a language, and is lots of fun!

** How to calculate the series resistor for an LED
*** DONE How to calculate the series resistor for an LED :Electronics:
:PROPERTIES:
:CUSTOM_ID: led-series-resistor
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20220202_led-series-resistor
:EXPORT_DATE: 2022-02-02
:EXPORT_DESCRIPTION: 20220202-Screen-Shot-2022-02-02-at-6.32.54-pm.png
:END:

When we connect an LED to to a battery, we often need to connect a resistor is series to limit the current. I saw this question come up in a facebook group, and thought it might be useful to use this as a simple illustrative example of doing circuit design.

The basic circuit we will be considering is shown below:

[[file:20220202-quicklatex.com-06f3bedeaf7e311d9af11493d4616842_l3.svg]]

We have a current $i$ leaving the battery/voltage source, passing through the resistor giving a voltage drop of $V_R$, then passing through the LED with a voltage drop of $V_{f_{LED}}$ before returning to the battery. So, how can we work out the value of the resistor we should use?

To answer that question, we need to know some things about the LED. Specifically:

    how much current do we want to be passing through the LED?
    what will be the voltage across the LED at that current?

How can we find the answer to those questions? We need to refer to the datasheet of the LED component!

First let’s check the maximum rating for the component. Looking at the datasheet, we see the following table:

[[file:20220202-Screen-Shot-2022-02-02-at-5.23.35-pm-1024x420.png]]

We can see that the maximum DC current for a red LED is 30mA. We generally don’t want to run a component right on its maximum limit, so what happens if we reduce the current a bit? Digging further on the datasheet, we find the following graphs:

[[file:20220202-Screen-Shot-2022-02-02-at-5.24.13-pm-1024x469.png]]

The graph in figure 3 shows us how bright the LED will be at various currents. At 10mA, the intensity of the LED light is said to be at a normalised level of 1. If we increase the current to 20mA, then the LED will be around 1.5 times as bright as the 10mA level. Increasing the current to 30mA (the max) then the intensity is only around 1.8 times as bright at the intensity at 10mA, so it is consuming a lot more power for little gain. At 20mA, we still get a bright intensity while leaving a fair amount of headroom below the maximum, so let’s design our circuit to have a current:

What will be the voltage across the LED at that current? Referring to the graph in figure 2, we see that the voltage across the LED will be approximately:

    \[V_{f_{LED}}=2\text{ V}\]

What will be the voltage across the resistor of R ohms? We know the current through the resistor must be 20mA, so we can use Ohm’s law to work out the voltage drop across the resistor:

        \[\begin{align*}
        V_R & = i \times R \\
        & = 20 \times 10^{-3} \times R
        \end{align*}\]

We can now use Kirchoff’s voltage law, which says the sum of voltages in a loop is always equal to 0V. If we go clockwise around the circuit, the voltage source helps the current and is therefore positive, whereas the resistor and LED oppose the current, so their signs are negative. The equation becomes:

        \[\begin{align*}
        V - V_R - V_{f_{LED}} & = 0 \\
        V - i \times R - V_{f_{LED}} & = 0 \\
        i \times R &= V - V_{f_{LED}} \\
        R & = \frac{V - V_{f_{LED}}}{i}
        \end{align*}\]

If we assume we are using a 9V battery, then substituting in the numbers gives us:

    \[\begin{split}R & = \frac{(9 - 2)}{20 \times 10^{-3}} \\ & = 350~\Omega\end{split}\]

For safety, we can round it up to the nearest preferred value, which would be a 390\Omega resistor with colour code orange-white-brown. Double-checking the current, we get:

    \[\begin{split} i & = \frac{V - V_{f_{LED}}}{R} \\
    & = \frac{(9 - 2)}{390} \\
    & = 18\text{ mA}\end{split}\]

This is still acceptable. So, we have now completed our circuit design:

[[file:20220202-quicklatex.com-fecf716ddc8012b94614dba19222cab7_l3.svg]]

** It's a Heartache
*** DONE It's a Heartache :music:
:PROPERTIES:
:CUSTOM_ID: its-a-heartache
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20220130_its-a-heartache
:EXPORT_DATE: 2022-01-30
:EXPORT_DESCRIPTION: 20220130-IMG_4547_01-999x1024.jpg
:END:

On the Australian TV Series Doctor Doctor, there’s a recurring piece of music that is playing using fingerpicking on the ukulele based on Bonnie Tyler’s hit song /It’s a Heartache/. A quick search on YouTube discovered that it comes from the lead-in of a music video by the Wellington International Ukulele Orchestra:

#+hugo: {{< youtube GqynAAYdLW8 >}}

I was keen to learn how to play something like it on my own ukulele, and a further search turned up a https://youtu.be/tutorial by Helmut Bickel where he has some hand-written tablature in the background of the video:

#+hugo: {{< youtube pCswBsuddrc >}}

To have the tab in a more convenient format, I wrote it up using the [[http://lilypond.org/][lilypond]] music typesetting software, and the resulting PDF is reproduced below:

#+hugo: {{< embed-pdf url="20220130-heartache-tab.pdf" >}}

** Digital Photography for Hams
*** DONE Digital Photography for Hams :Photography:HamRadio:
:PROPERTIES:
:CUSTOM_ID: photography-for-hams
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20220120_photography-for-hams
:EXPORT_DATE: 2022-01-20
:EXPORT_DESCRIPTION: 20200120-Screenshot_2022-02-02_21-07-23-1024x550.png
:END:

Last night I spoke about Digital Photography at the [[https://www.mwrs.org.au/][Manly Warringah Radio Society]], a club for ham radio operators. I decided to structure the talk in such a way that it drew parallels between digital photography and ham radio.

First I compare a digital camera to a ham radio station based on a /software defined radio (SDR)/. Just like we use radio antennas to collect ravio waves, a camera lens collects light waves. Both digital cameras and SDRs contain an analogue-to-digital converter to convert waves into a digital signal. They also have digital processors to convert the received signals into a form perceivable by human ears and eyes

I talked about photography’s /exposure triangle/, and linked it back to techniques we use in ham radio when dealing with weak signals. We covered typical camera settings such as focal length, aperture and shutter speed, and discussed some of the trade-offs and special effects they can produce.

Finally, I talked about using a raw file editor to provide a photographer with more freedom in processing an image, and briefly introduced the open source [[https://www.darktable.org/][darktable project]] as an example of such an editor.

A recording of the talk will be available on the [[https://www.youtube.com/user/VK2MB][MWRS YouTube channel]] in due course. Here are the presentation slides I used:

#+hugo: {{< embed-pdf url="20220120-photography_for_hams.pdf" >}}

** 〜て-Form Song
*** DONE 〜て-Form Song :Languages:Japanese:
:PROPERTIES:
:CUSTOM_ID: te-form-song
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20211224_te-form-song
:EXPORT_DATE: 2021-12-24
:END:

When I was studying Japanese at TAFE, our teacher Masa-sensei taught us a silly song to remember how to produce the 〜て form of a verb, given its 〜ます stem or its dictionary form.

He told us that he designed the song to be sung to the tune of “Santa Claus is coming to town” so that every year at Christmas time we would hear the tune and be reminded of how to make 〜て form.

Well, it worked — even though that was more than 10 years ago, I still remember the song as it comes up to Christmas.

#+begin_example
まさ先生、どうもありがとうございました 😁

〜て Form Song:

いちり-って、みびに-んで、

き-いて、ぎ-いで、

します-して、

きます-きて、いきます-いって。

うつる-って、むぶぬ-んで、

く-いて、ぐ-いで、

す.する-して、

くる-きて、いく-いって。

For group 2 verbs, you can easily convert, just taking off ‘ます’ from ます-form, and a て is what you put!

(back to first verse)
#+end_example

To find out more about the 〜て form of Japanese verbs, you can refer to [[http://guidetojapanese.org/learn/complete/progressive_tense][Tae Kim’s Japanese Grammar Guide]].

*** DONE 〜て-𐑓𐑹𐑥 𐑕𐑪𐑙 :𐑤𐑨𐑙𐑜𐑢𐑦𐑡𐑩𐑟:𐑡𐑨𐑐𐑩𐑯𐑰𐑟:
:PROPERTIES:
:CUSTOM_ID: te-form-song.en-shaw
:EXPORT_FILE_NAME: index.en-shaw.md
:EXPORT_HUGO_BUNDLE: 20211224_te-form-song
:EXPORT_DATE: 2021-12-24
:END:

𐑢𐑧𐑯 𐑲 𐑢𐑪𐑟 𐑕𐑑𐑳𐑛𐑦𐑦𐑙 ·𐑡𐑨𐑐𐑩𐑯𐑰𐑟 𐑨𐑑 ·𐑑𐑱𐑓, 𐑬𐑼 𐑑𐑰𐑗𐑼 ·𐑥𐑳𐑕𐑳-𐑕𐑧𐑯𐑖𐑱 𐑑𐑷𐑑 𐑳𐑕 𐑩 𐑕𐑦𐑤𐑦 𐑕𐑪𐑙 𐑑 𐑮𐑦𐑥𐑧𐑥𐑚𐑼 𐑣𐑬 𐑑 𐑐𐑮𐑩𐑛𐑿𐑕 𐑞 〜て 𐑓𐑹𐑥 𐑝 𐑩 𐑝𐑻𐑚, 𐑜𐑦𐑝𐑩𐑯 𐑦𐑑𐑕 〜ます 𐑕𐑑𐑧𐑥 𐑹 𐑦𐑑𐑕 𐑛𐑦𐑒𐑖𐑩𐑯𐑼𐑦 𐑓𐑹𐑥.

𐑣𐑰 𐑑o𐑤𐑛 𐑳𐑕 𐑞𐑨𐑑 𐑣𐑰 𐑛𐑦𐑟𐑲𐑯𐑛 𐑞 𐑕𐑪𐑙 𐑑 𐑚𐑰 𐑕𐑳𐑙 𐑑 𐑞 𐑑𐑿𐑯 𐑝 "𐑕𐑨𐑯𐑑𐑩 𐑒𐑤𐑷𐑟 𐑦𐑟 𐑒𐑳𐑥𐑦𐑙 𐑑 𐑑𐑬𐑯" 𐑕𐑴 𐑞a𐑑 𐑧𐑝𐑮𐑦 𐑘𐑽 𐑨𐑑 𐑒𐑮𐑦𐑕𐑥𐑩𐑕 𐑑𐑲𐑥 𐑢𐑰 𐑢𐑫𐑛 𐑣𐑽 𐑞 𐑑𐑿𐑯 𐑯 𐑚𐑰 𐑮𐑦𐑥𐑲𐑯𐑛𐑩𐑛 𐑝 𐑣𐑬 𐑑 𐑥𐑱𐑒 𐑞 〜て 𐑓𐑹𐑥.

𐑢𐑧𐑤, 𐑦𐑑 𐑢𐑻𐑒𐑑 -- 𐑰𐑝𐑩𐑯 𐑞𐑴 𐑞𐑨𐑑 𐑢𐑪𐑟 𐑥𐑹 𐑞𐑨𐑯 10 𐑘𐑽𐑟 𐑩𐑜𐑴, 𐑲 𐑕𐑑𐑦𐑤 𐑮𐑦𐑥𐑧𐑥𐑚𐑼 𐑞𐑨𐑑 𐑕𐑪𐑙 𐑨𐑟 𐑦𐑑 𐑒𐑳𐑥𐑟 𐑳𐑐 𐑑 𐑒𐑮𐑦𐑕𐑥𐑩𐑕.

#+begin_example
まさ先生、どうもありがとうございました 😁

〜て 𐑓𐑹𐑥 𐑕𐑪𐑙:

いちり-って、みびに-んで、

き-いて、ぎ-いで、

します-して、

きます-きて、いきます-いって。

うつる-って、むぶぬ-んで、

く-いて、ぐ-いで、

す.する-して、

くる-きて、いく-いって。

𐑓 𐑜𐑮𐑵𐑐 2 𐑝𐑻𐑚𐑟, 𐑿 𐑒𐑨𐑯 𐑰𐑟𐑩𐑤𐑦 𐑒𐑪𐑯𐑝𐑻𐑑, 𐑡𐑳𐑕𐑑 𐑪𐑓 ‘ます’ 𐑓𐑮𐑪𐑥 ます-𐑓𐑹𐑥, 𐑯 𐑩 て 𐑦𐑟 𐑢𐑪𐑑 𐑿 𐑐𐑫𐑑!

(𐑚𐑨𐑒 𐑑 𐑓𐑻𐑕𐑑 𐑝𐑻𐑕)
#+end_example

𐑑 𐑓𐑲𐑯𐑛 𐑬𐑑 𐑥𐑹 𐑩𐑚𐑬𐑑 𐑞 〜て 𐑓𐑹𐑥 𐑝 ·𐑡𐑨𐑐𐑩𐑯𐑰𐑟 𐑝𐑻𐑚𐑟, 𐑿 𐑒𐑨𐑯 𐑮𐑦𐑓𐑻 𐑑 [[http://guidetojapanese.org/learn/complete/progressive_tense][·𐑑𐑱 𐑒𐑦𐑥𐑟 𐑡𐑨𐑐𐑩𐑯𐑰𐑟 𐑜𐑮𐑨𐑥𐑼 𐑜𐑲𐑛]].

** Sony A7R4 Selfie Solution
*** DONE Sony A7R4 Selfie Solution :Photography:
:PROPERTIES:
:CUSTOM_ID: a7r4-selfie-solution
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20191004_a7r4-selfie-solution
:EXPORT_DATE: 2019-10-04
:EXPORT_DESCRIPTION: 20191004-961C3B92-E725-4065-9A38-54BE23EDC24B.jpeg
:END:

One of the common complaints about the Sony A7 series of cameras is that they do not have a flip-around screen that allows you to frame the shot when you are taking a selfie. I managed to put together a solution for this out of some parts I had laying around.

It consists of:

- Sony A7 series camera- Hotshoe adaptor with 1/4” screw
- Smartphone holder which accepts 1/4” screw
- Joby Gorillapod with Arca-Swiss mount to accept the plate on bottom of the camera (I use a Peak Design dual plate to make the camera compatible with both Arca
- Swiss and Manfrotto RC2 mounts)
- [optional] micro-USB shutter release cable (otherwise just use the self-timer on the camera)
- Smartphone with Sony Imaging Edge app installed and paired to the camera

[[file:20191004-253B8BE6-1017-4384-B870-2D8F56E98462.jpeg]]

In this way, the camera can be placed on the Joby gorillapod which acts as a “selfie stick”, and the remote view on the Sony Imaging Edge app on the smartphone allows you to frame the shot and you can tap it to release the shutter.

If I want to use this setup for video vlogging, there is nowhere to mount a shotgun mic, so likely I would use a lavalier mic plugged into the camera itself, or perhaps into a second smartphone acting as a voice recorder.

** Should I use Back Button Focus on Sony A7R4?
*** DONE Should I use Back Button Focus on Sony A7R4? :Photography:
:PROPERTIES:
:CUSTOM_ID: back-button-focus
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20191003_back-button-focus
:EXPORT_DATE: 2019-10-03
:EXPORT_DESCRIPTION: 20191003-37FE80D9-053E-4D88-B858-B13645808C57.png
:END:

I just recently acquired the new Sony A7R4 mirrorless full frame camera, and have been working through the focusing systems on this camera. One of the questions that comes up is whether or not to use back button focus.

As you can see, it has an “AF ON” button on the back that would be perfect for this. All you need to do is to go into the menu and set the “AF w/ Shutter” option to “OFF”. This prevents the shutter button from activating auto focus, and instead you can activate the auto focus via the “AF-ON” button on the back. I assigned the “Focus Mode” to the C3 button on the back, and set the focus mode to “AF-C” (continuous autofocus). So, how did this work out?

Well, back button focus works as you would expect. However, I ran into 2 issues:

1. When someone offers to take my photo with my own camera, I normally set the shoot mode dial to “fully automatic” before handing it over. On my Canon M50, this then re-enables auto focus on the shutter button, so that when the other person presses the shutter button, the camera will focus itself. The Sony doesn’t do this, and unless the person presses the “AF-ON” button on the back first, the picture will be out of focus

2. Because the Sony doesn’t have a flippy screen that flips around to the front, when you take a selfie you need to use an app on your smart phone to frame the picture. You can trigger the shutter from the app, but there is no way to get the camera to focus without reaching around behind the camera to push the “AF ON” button. The Canon app has a separate auto focus button when the camera is set up for BBF, but this is completely lacking on the Sony.

   [[file:20191003-70D4E62D-805D-43F5-BD19-D7304A6E78A9.png]]

Turning off BBF solves these issues, but sometimes you really don’t want the camera refocusing when you press the shutter button. Also, it is nice to be able to check and tweak the focus manually after auto-focusing, but this doesn’t work unless you put the camera in “DMF” focus mode. So, what’s the best way to set up the camera to allow the shutter button to do autofocus normally, but suppress it easily when wanting a back-button or manual focus bevahiour?

I looked into Mark Galer’s Focus masterclass, and looked at some other blogs for how people do BBF. After some playing around, I’ve come up with the following setup:

- The “AF w/ Shutter” option is set to “ON” to allow the shutter to trigger the auto focus under normal conditions. The “C3” button is assigned to “Focus Mode”, and here I would normally select “AF-C”. I can choose the appropriate “Focus Area” setting using the “C1” button, which I typically set to “Wide” or “Tracking Flexible Expanded Spot”. The latter lets me do a “focus-recompose” action with the shutter half depressed, and the camera will keep tracking the subject I first selected when half-pressing the shutter. Manual focus adjustments generally won’t work with this setup (it depends on the lens).
- The “AF-ON” button gets assigned to the camera’s “custom hold recall” feature. This allows us to define some settings that should be overridden with a special profile while ever the button is held down. In the custom hold profile I set it to temporarily set the Focus Mode to “DMF” and to enable “AF-ON”. If I hold in the “AF ON” button, the camera goes to DMF mode, which will auto-focus using the currently selected “Focus Area” setting, and allow me to tweak the focus manually. While holding in the “AF ON” button I can then press the shutter and it will take the shot with my manual focus adjustment in place.
- If I want the camera to completely decouple the shutter button from auto-focusing ( as in BBF) I use the “C3” button to set the focus mode to “Manual Focus”. I can now focus manually at will, and if I want the camera to auto-focus I just hold in the “AF ON” button. Once I release the “AF ON” button, the camera is back in manual focus mode, and I can depress the shutter without affecting the focus.
- If I want to take a selfie, I just need to use the “C3” button to set the Focus Mode back to “AF-S” or “AF-C”.
- If I want to hand the camera over to someone else to take a picture, I use the shoot mode dial to recall one of the memory profiles (I use M4). This puts the camera in fully automatic, set the “Focus Mode” to “AF-C”, and sets the “Focus Area” to “Wide”, to make the camera as idiot-proof as possible.

By setting the “AF ON” button to use “DMF” as an override, it allows me to do manual focus adjustments even if the camera is in automatic focus mode. However, like this it will do a one-shot focus and then wait for any manual adjustment. Sometimes when people use back-button focus, they want the camera to do continuous focus while ever the back button is held in. I’m not too worried about this, because if I want to do AF-C, I can just use the main shutter button. However, if I have put the camera in manual focus mode to get a true BBF effect, then it would be preferable to override the focus mode to “AF-C” rather than “DMF”. This could be assigned to another button, like the “AEL” button. While ever the AEL button is held in, the camera will continuously auto-focus, and when the button is released it will revert to manual focus while will allow any last manual adjustment before releasing the shutter. Maybe I’ll do that some time, but at the moment I have the AEL button to be my “oh quick, put some sensible settings in to get this sudden unexpected action shot” button.

Just another nice feature I discovered is with the multi-selector joystick control. If you push it in while you are in AF-C mode, then it will either center the focus box, or it will act as an “AF-S” back button focus. The AF-S in Sony cameras will give you a more accurate focus than AF-C since it does a contrast-based focus check at the end to verify focus. Holding in the multi-selector and then squeezing the shutter will result in a more accurate AF-S focus, provided you were in a “Wide” or “Centre” Focus Area mode.

So, that’s the way I’ve set up the camera for now — normally in AF-C mode triggered by the shutter button, with easy manual focus override via “AF ON” button, and the possibility to drop into BBF mode by setting the camera to manual focus with button “C3”. (I could also set up button “C3” to simply toggle between AF and MF, I’ll use the camera for a bit and see if it is worthwhile).

Feel free to comment if you have other suggestions to allow for easy transition between auto-focus, BBF, selfie and third-party/untrained user workflows.

** Elecraft K2 Amplifier Keying Circuit
*** DONE [#B] Elecraft K2 Amplifier Keying Circuit :HamRadio:Electronics:Elecraft:K2:KXPA100:
:PROPERTIES:
:CUSTOM_ID: elecraft-k2-amplifier-keying-circuit
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20140420_elecraft-k2-amplifier-keying-circuit
:EXPORT_DATE: 2014-04-20
:EXPORT_DESCRIPTION: 20141420-IMG_0118-Version-2-768x1024-1.jpg
:END:

I have been building an [[http://www.elecraft.com/k2_page.htm][Elecraft K2 kit radio]], and I completed construction this Easter weekend.

When I ordered the kit, I didn’t order the internal ATU or the 100W amplifier option, as I already have an [[http://www.elecraft.com/KXPA100/kxpa100.htm][Elecraft KXPA100 amplifier with KXAT100 ATU]]. However, this amplifier is designed to work with the [[http://www.elecraft.com/KX3/kx3.htm][KX3]] radio, and so to get it to work with the K2, I would need to build up a keying circuit.

Fortunately, Elecraft published on their website a [[http://www.elecraft.com/Apps/Amp_keying_ckt.htm][neat solution]] for this. It consist of a couple of transistors mounted on some perfboard, which slots into a PCB header socket intended for the K2’s transporter interface module. Because I don’t have this option, my radio didn’t have the required header socket, but luckily the local electronics store sells suitable headers as part of their Arduino range. I picked up one of these headers, together with the other requisite parts.

The article on the Elecraft website provides a schematic, and some photos of the finished board, but they didn’t provide detailed information about how to build the circuit onto the perfboard. Fortunately, the circuit is quite simple, and wasn’t too hard to work out, but I decided to draw up a diagram which provides a better view of how the components are laid out and the physical connections are made.

[[file:20141420-key_cct1.png]]

The dotted lines show connections running under the board (except the gate lead of the 2N7000 JFET — that runs under the transistor, but along the top of the board).

I built the circuit in the following sequence:

1. put the 8 pin male header under the board on the left side, and solder one leg of the 2.2k resistor to the pin sticking out the top of the board at position A8. This then holds the header in place. The other leg on the 2.2k resistor goes through hole B5.

2. Sit the 10k resistor sitting up on end in hole C5, bend over the top leg and stick it through hole D4. Bend the legs underneath the board to hold the resistor in place.

3. Put a piece of hookup wire (eg. a component lead off-cut from when you built your K2) through hole D3. On the top of the board, bend the wire so it reaches the header pin 2 sticking through hole A2 and solder it to that pin.

4. Mount the right-angle molex receptor on top of the board through holes E1 and F1. Under the board, bend the hookup wire you installed in the previous step so it reaches the receptor pin sticking through hole F1, and solder to the receptor pin and trim. This will hold the receptor in place.

3. The Gate and Source legs of the 2N7000 JFET are the left two legs, if you hold the transistor with the flat face towards you. Bend those two legs backwards, and put the remaining leg (the Drain) in hole C1. Bend the Drain leg under the board down towards the resistors to hold the transistor in place.

4. Solder the Source leg (the left one you bent back) to the header pin 2, which sticks out of hole A2, and trim. Careful not to dislodge the hookup wire that is also soldered to that pin. Trim both the transistor lead and the hookup wire.

5. Solder the Gate leg (the middle one you bent back) to the header pin 1, which sticks out of hole A1, and trim.

6. The drain of the JFET which goes down through hole C1, and the resistor legs sticking through holes B5 and C5 should be bent so they all meet up. Solder the three leads together and trim.

7. The Emitter leg of the 2N2222 BJT is the left-most leg, if you hold the transistor with the flat face towards you. Bend that leg backwards, and put the middle leg (Base) through hole C4 and the right most leg (Collector) through hole C3. Solder the Emitter leg that was bent back to the header pin 4 sticking up through hole A4.

8. Bend the Collector leg sticking through hole C3 so it reaches the molex receptor pin sticking through hole E1 under the board, and solder the leg to the receptor pin.

9. Bend the Base leg sticking through hole C4 so under the board it meets the 10k resistor leg sticking through hole D4, solder the two legs together and trim.

10. Make up a short cable (3″ or 4″) with the molex plug on one end. Solder the side of the cable that connects to the pin closest to the side of the board, going through hole F1,  to the ground lug on the RCA connector.

11. Install the RCA connector in the hole on the bottom chassis labelled “XVTR IN”. Solder the other side of the molex plug cable to the inner conductor of the RCA connector.

12. Plus the keying circuit board into the J13 header socket on the RF board. Connect the molex plug to the molex receptor on the keying circuit board.

And that’s it. Plug one end of the RCA-RCA cable into the new RCA connector on the back on your K2, and plug the other end of the cable into the “PA KEY” RCA socket on the back of the KXPA100. Connect up a patch cord between the K2 ANT OUT and the KXPA100 RF IN, and you are good to go.

Here are some pics of the completed circuit, from above and from beneath.

[[file:20141420-IMG_0113-1024x768-1.jpg]]

[[file:20140420-IMG_0114-1024x768-1.jpg]]

[[file:20140420-IMG_0118-Version-2-768x1024-1.jpg]]

** Beverage Antennas
*** DONE Beverage Antennas :HamRadio:
:PROPERTIES:
:CUSTOM_ID: beverage-antennas
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20140414_beverage-antennas
:EXPORT_DATE: 2014-04-14
:END:

[[file:20140414-Figure_D-11_Long-wire_antenna_FM_7-93_1995.gif]]

At my local radio club, one of the members likes to hop on the 80 metre band with his morse code key. We were discussing what might be some good topics for upcoming lectures, and he mentioned that he was curious about beverage antennas.

I didn’t know anthing about this topic, so I thought it would be great to go away, do some research and learn about them so I could deliver a lecture. It seems indeed that beverage antennas are a great option for receiving signals on the low bands, but they do require a huge amount of space, and are less well suited at a transmissing antenna.

The lecture was recorded and can be found on the club’s YouTube channel:

#+hugo: {{< youtube xnVgbdkK_Iw >}}

The [[https://www.slideshare.net/VK2MB/april-2014-lecture-beverage-antennas][slidepack]] is available on slideshare.

** Packet Radio Talk
*** Packet Radio Talk :HamRadio:PacketRadio:AX25:
:PROPERTIES:
:CUSTOM_ID: packet_radio_talk
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20140219_packet_radio_talk
:EXPORT_DATE: 2014-02-19
:EXPORT_DESCRIPTION: 20140219_packet-radio-chat.png
:END:

At my local amateur radio club I gave a talk about packet radio, covering topics such as AX25 frames, digipeaters, netrom nodes, and applications that run over packet radio such as APRS and BBS. On YouTube you can find a [[http://www.youtube.com/watch?v=Ar0dEiwu6KE][recording of the talk]].

The slides from the talk can be found here:

#+hugo: {{< embed-pdf url="20140219_packet-radio-talk.pdf" >}}

** Packet Radio Resources
*** DONE Packet Radio Resources :HamRadio:PacketRadio:AX25:
:PROPERTIES:
:CUSTOM_ID: packet-radio
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20121018_packet-radio
:EXPORT_DATE: 2013-03-21
:END:

**** AX.25 Packet on Linux

Recently I have been experimenting with setting up packet radio on an ASUS netbook running Debian Linux. There have been a few challenges with this, which I describe below.

- Installation of AX25 Lib/Tools/Apps: the problem here is that the packages supplied with debian are a little old, and assume that the kernel has support for legacy BSD-style pseudo-terminals. However, in the standard kernel distributed with debian linux, support for the legacy ptys has not been compiled in. So, I had a choice of recompiling the kernel to support the legacy ptys, or else compile up newer versions of the ax25libs/tools/apps that support the new Unix98-style ptys. I chose the latter.
- The AX.25 "call" program supplied in the ax25apps package was crashing when I resized the window, and didn't have support for any scrollback buffer. I found a [[https://marc.info/?l=linux-hams&m=126174094113550][patch]] on the web that addresses these issues, but it was built against ax25-apps-0.0.8-rc2, and wouldn't apply cleanly to the more recent version of call.c in CVS that supports the Unix98 PTYs. So, I updated the patch to make it compatible with the newer release, and you can [[file:call_patch.txt][download the updated patch here]].
- I had an issue with getting [[http://www.baycom.org/~tom/ham/soundmodem/][linux soundmodem]] to work at 300 baud. I found the fix was to use modem tones less than 4*300=1200 Hz. However, I wanted to cover the national APRS freqnency on 40 m and the frequency used by our local packet group around 1 kHz higher together at the same time with the same radio. I found a [[file:soundmodem_300baud_patch.txt][testing patch]] against soundmodem-0.16 that removes this restriction on the modem tones.
- The aprsd packaged with debian doesn't support multiple TNCs, and you can only run one instance of it on the system. So, I looked to the APRX daemon instead. This does support multiple TNCs, but unfortunately kept dumping core on my system. I made a [[file:aprx_telemetry_patch.txt][small patch]] to prevent this from happening.
- I found a patch to provide Internode Protocol (INP3) Support for Linux on [[http://sharon.pi8zaa.ampr.org/users/pe1rxq/inp3.html][this page]]. However, the patch was written against linux kernel 2.6.4, and does not apply cleanly to the latest 2.6.32 kernel. So, I [[file:2.6.32-inp3_007_patch.txt][updated the patch]]. However, I found that the patch causes a soft lockup when taking an AX25 interface out of service, due to a deadlock with the =spin_locks=, so some additional work is needed to address this. Investigations so far indicate a problem with =nr_del_node_found()=, which removes neighbours and nodes that are no longer valid. When it is called, sometimes there is already a lock on the global neighbour list, and sometimes there is also a lock on the global node list. When removing a neighbours or node, an attempt will be made to acquire a lock on the global neighbour or node list, and if such a lock is already existing, there is a deadlock, and the CPU will just spin. Will need to think about the best way to clean up the code.

**** Packet Radio Resources

I have collected here some useful links in my search to learn about packet radio.

- [[https://portal.ampr.org/index.php][AMPRNet Portal]] to manage 44.0.0.0/8 IP allocations and ampr.org DNS resource records.
- [[http://wiki.complete.org/PacketRadio][Packet Radio Overview]] at Complete.Org
- [[http://www.choisser.com/hamradio/packet.html][Larry Kenney WB9LOZ]] packet radio information page, including his [[http://www.choisser.com/packet/][Introduction to Packet Radio]] series of articles
- [[http://vk2dot.dyndns.org/][VK2DOT Packet Site]], including his [[http://vk2dot.dyndns.org/XR32/VK2DOT-IP-Setup.htm][Packet Setup page]].
- [[http://www.linux-ax25.org/wiki/Main_Page][Linux AX.25 Page]]
- [[http://www.db0anf.de/app/bbs][DB0ANF BBS page]], can view packet BBS via web
- [[http://www.langelaar.net/projects/jnos2/downloads/linux/][JNOS]] developer page (and [[http://www.kf8kk.com/packet/jnos-linux/linux-jnos-setup-ftpusers-txt.htm][KF8KK's JNOS Setup Guide]])
- [[http://www.soundcardpacket.org/][Soundcard Packet page]] by Ralph Miles NM5RM
- [[http://www.langelaar.net/projects/jnos2/documents/ipudp.txt][IP-in-UDP encapsulation]] with JNOS
- [[http://www.ampr-gates.net/frame_e.htm][AMPR Gates]] covering packet radio gateways and AXIP encapsulation
- [[ftp://hamradio.ucsd.edu/pub/][Hosts and DNS Zone files]] for ampr.org domain and 44.0.0.0/8 net
- [[http://www.vdazone.org/lantzdocs/packet.html][N5VDA Packet page]], with list of packet software
- [[http://www.ampr-gates.net/frame_e.htm][AMPR Gateways page]]
- [[http://www.dxcluster.info/dxcsoft.htm][DX Cluster]] information page
- [[http://www.a00.de/tcpgroup/1988/msg00006.php][Net/Rom Manual]] and [[http://www.ir3ip.net/iw3fqg/doc/ipax25.htm][Original NET/ROM Paper]]
- Running [[http://www.qbjnet.com/packet.html][Packet radio on Linux]]
- Linux [[http://www.tldp.org/HOWTO/AX25-HOWTO/][AX25 HOWTO]]
- [[http://groups.yahoo.com/group/SV2AGW/][AGWPE Yahoo Group]]
- [[http://www.tapr.org/pdf/AX25.2.2.pdf][AX.25 Protocol standard]]
- [[http://www.timewave.com/download.html][Timewave]] manufacturer of PK232 TNC
- [[http://ftp.f6fbb.org/][FBB Main Page]] and [[http://www.qsl.net/ok2pen/LinuXFBB.htm][FBB Setup for Dummies]]
- [[http://mirror.switch.ch/ftp/pool/3/mirror/hamradio-ucsd/packet/misc/README.ax25ip][AX25IP README]]
- [[http://rose.fpac.free.fr/][FPAC Mini-HOWTP]]
- [[http://www.febo.com/packet/index.html][N8UR Packet pages]]
- [[ftp://ftp.tapr.org/software_lib/Linux/ax25/][TAPR SW Library]]
- Linux [[http://www.linux-ax25.org/wiki/CVS][AX25 SW Suite]] and [[http://linkt.de/ax25spyd/][AX25SPY Page]]
- The [[https://qsl.net/vk2rq/digipeaters.html][Problem with Digipeaters]] by Tom Clark W3IWI, 1986
- Installing [[https://dl.dropbox.com/u/31910649/InstallingLINBPQ.htm][LinBPQ]] BPQ Node/Mail/Chat on Linux
- Archive of the [[https://www.qsl.net/vk2rq/aapra/][AAPRA Website]] (now defunct, but various useful historic documents)

**** Packet Activity in the Local Area
|--------------+----------------------------------------------+----------------------------------------------------------------------------------|
|     Freq/MHz | Callsigns                                    | Comments                                                                         |
|--------------+----------------------------------------------+----------------------------------------------------------------------------------|
|      7.03717 | VK2IO BBS, VK2WL, VK2SX, VK2TT, VK4ALN et al | LSB w 1600/1800 Hz tones: The VK2IO HF BBS is stand-alone,                       |
|              |                                              | but VK2IO-1 node has connectivity via Internet                                   |
|--------------+----------------------------------------------+----------------------------------------------------------------------------------|
|      145.175 | VK2MB-1, VK2BEN-1 et al                      | National APRS Frequency, lots of activity                                        |
|--------------+----------------------------------------------+----------------------------------------------------------------------------------|
|      144.875 | VK2TGB                                       | VK2TGB BBS in the Blue Mountains (part-time only)                                |
|--------------+----------------------------------------------+----------------------------------------------------------------------------------|
|      147.575 | VK2IO-1, VK2AMW-7, VK2DOT-1                  | VK2IO BBS/VK2IO-1 node is separate instance from VK2IO on HF;                    |
|              |                                              | links to wider packet network with message forwarding (via RF only, no internet) |
|              |                                              | I can connect from my QTH via VK2AMW-7 node/digipeater                           |
|--------------+----------------------------------------------+----------------------------------------------------------------------------------|
| 439.150(out) | VK2RAG data regenerator                      | Reception is too marginal from my QTH, need a better antenna :-)                 |
|  434.150(in) |                                              | Would then be able to access VK2IO, VK2DOT.                                      |
|--------------+----------------------------------------------+----------------------------------------------------------------------------------|

There are some others I will check out listed on [[http://www.qsl.net/vk2kfj/pacradio.html][Steve VK2KFJ's Packet page]], (the info is dated, so some of these systems may not be running anymore)
Channels on the VK2MB Packet Digipeater

On the radio used for packet digipeating at the MWRS club house, the following channels have been programmed:
|---------+----------+---------------------------------------------------------------------------|
| Channel | Freq/MHz | Comments                                                                  |
|---------+----------+---------------------------------------------------------------------------|
|       1 |  147.575 | Main Channel (default), access VK2IO-1, VK2DOT-1, VK2RQ-7, VK2AMW-7 nodes |
|       2 |  144.425 | VK2RSY beacon (for diagnostics/testing)                                   |
|       3 |  144.700 | Backup port to VK2DOT-1 XRouter                                           |
|       4 |  144.875 | Backup port to VK2IO & VK2TGB BBS systems                                 |
|       5 |  145.175 | Primary APRS frequency in VK                                              |
|       6 |  145.200 | Alternate local packet frequency                                          |
|       7 |  147.600 | Alternate local packet frequency                                          |
|---------+----------+---------------------------------------------------------------------------|

** CSQ Summary
*** DONE CSQ Summary :HamRadio:
:PROPERTIES:
:CUSTOM_ID: csq-summary
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20130312_csq-summary
:EXPORT_DATE: 2013-03-12
:END:

**** CSQ Summary
The following is a proposal from Bruce Prior N7RR for a signal reporting system based on [[http://antrak.org.tr/index.php?option=com_content&task=view&id=378&Itemid=83][Copyability-Strength-Quality (CSQ)]], and as an alternative to the traditional Readability-Strength-Tone (RST) system.

***** C or Copyability

| Copyability | Description                                       |
| N           | no recoverable signal $^{*}$                      |
| 0           | discernable but not copyable $^{*}$               |
| 1-9         | 10% to 90% copy                                   |
| G           | Good 100% copy, but short of perfect              |
| P           | Perfect armchair 100% copy or full quieting on FM |

$^{*}$ For Copyability reports of N and 0, no Signal Strength or Quality reports are needed.

***** S-Meter or Signal Strength

| Strength | Description             |
| 0        | no S-meter reading      |
| 1-9      | S-1 to S-9              |
| A        | 1 dB to 10 dB over S-9  |
| B        | 11 dB to 20 dB over S-9 |
| C        | 21 dB to 30 dB over S-9 |
| D        | 31 dB to 40 dB over S-9 |
| E        | 41 dB to 50 dB over S-9 |
| F        | 51 dB or more over S-9  |

***** Quality

| Quality | Description                                                              |
| X       | characteristic steadiness of crystal (Xtal) control or eXcellent quality |
| R       | AC Ripple or buzz in transmission                                        |
| C       | Chirp or tail on make and/or break                                       |
| K       | key clicKs or other Keying transients                                    |
| O       | Overmodulation or Overdeviation in phone or digital modes                |

***** Examples

| Report | Description                                                                        |
| P6O    | for a PSK-31 signal: perfect 100 % copy at S-6, but overdeviated                   |
| 93X    | for a CW signal: 90 % copy at S-3 with excellent quality                           |
| G7O    | for an SSB signal: Good but less than perfect 100 % copy at S-7, but overmodulated |
| PAX    | for an RTTY signal: perfect 100 % copy about 10 dB over S-9 with excellent quality |
| P6X    | for an FM signal: full-quieting 100 % copy at S-6 with excellent quality           |

**** RST Summary

For comparison with the proposed CSQ system, here are the definitions for the traditional RST system.o

***** R or Readability

| Readability | Description                                       |
|           1 | Unreadable                                        |
|           2 | Barely readable, occasional words distinguishable |
|           3 | Readable with considerable difficulty             |
|           4 | Readable with practically no difficulty           |
|           5 | Perfectly readable                                |

***** Strength

| Strength | Description                      | HF Signal | V/UHF Signal |
|        1 | Faint signal, barely perceptible | -121 dBm  | -141 dBm     |
|        2 | Very weak                        | -115 dBm  | -135 dBm     |
|        3 | Weak                             | -109 dBm  | -129 dBm     |
|        4 | Fair                             | -103 dBm  | -123 dBm     |
|        5 | Fairly good                      | -97 dBm   | -117 dBm     |
|        6 | Good                             | -91 dBm   | -111 dBm     |
|        7 | Moderately strong                | -85 dBm   | -105 dBm     |
|        8 | Strong                           | -79 dBm   | -99 dBm      |
|        9 | Very strong signals              | -73 dBm   | -93 dBm      |

***** Tone

| Tone | Description                                                |
|    1 | Fifty cycle a.c or less, very rough and broad              |
|    2 | Very rough a.c., very harsh and broad                      |
|    3 | Rough a.c. tone, rectified but not filtered                |
|    4 | Rough note, some trace of filtering                        |
|    5 | Filtered rectified a.c. but strongly ripple-modulated      |
|    6 | Filtered tone, definite trace of ripple modulation         |
|    7 | Near pure tone, trace of ripple modulation                 |
|    8 | Near perfect tone, slight trace of modulation              |
|    9 | Perfect tone, no trace of ripple or modulation of any kind |

The following letters can be optionally suffixed:

| Suffix | Description                           |
| X      | stable frequency (crystal control)    |
| C      | "chirp" (frequency shift when keying) |
| K      | key clicks                            |

**** RSQ Summary

For digital work, the Readability-Strength-Quality signal reporting system is sometimes used.

***** R or Readability

| Readability | Description                                                  |
|           1 | 0 % copy - undecipherable                                    |
|           2 | 20 % copy -occasional words distinguishable                  |
|           3 | 40 % copy - readable with difficulty, many missed characters |
|           4 | 80 % copy - Readable with no difficulty                      |
|           5 | 95 % + copy - Perfectly readable                             |

***** Strength

| Strength | Description              |
|        1 | barely perceptible trace |
|        3 | Weak trace               |
|        5 | Moderate trace           |
|        7 | Strong trace             |
|        9 | Very strong trace        |

***** Quality

| Quality | Description                                 |
|       1 | splatter over much of the spectrum          |
|       3 | multiple visible pairs                      |
|       5 | One easily visible pair                     |
|       7 | One barely visible pair                     |
|       9 | Clean signal - no visible unwanted sidebars |
